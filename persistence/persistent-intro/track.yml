challenges:
- assignment: 'RWO storage is the most basic type of storage that is supported by
    most dynamic storage provisioners in the Kuberneted eco system.


    With Openshift Container Storage (ODF), each RWO storage device is backed by its
    own block device, which means that it is well suited for high-IOPs and low-latency
    operations that are common for database workloads.


    In this section the `ocs-storagecluster-ceph-rbd` _storage class_ will be used
    by an Openshift application + database _deployment_ to create RWO (ReadWriteOnce)
    persistent storage. The persistent storage will be a Ceph RBD (RADOS Block Device)
    volume (object) in the Ceph pool `ocs-storagecluster-cephblockpool`.


    To do so we have created a template file, based on the OpenShift rails-pgsql-persistent
    template, that includes an extra parameter STORAGE_CLASS that enables the end
    user to specify the storage class the PVC (Persistent Volume Claim) should use.


    ````

    oc new-project my-database-app

    oc new-app rwo_rails_app.yaml -p STORAGE_CLASS=ocs-storagecluster-ceph-rbd -p
    VOLUME_CAPACITY=5Gi

    ```

    `

    ```


    After the deployment is started you can monitor with these commands.


    ```

    oc status

    ```


    Check the PVC that were created.


    ```

    oc get pvc -n my-database-app

    ```


    This step could take a few minutes. Wait until there are 2 *Pods* in `Running`
    STATUS and 4 *Pods* in `Completed` STATUS as shown below.


    ```

    watch oc get pods -n my-database-app

    ```


    ---


    **Example output:**


    <pre>

    NAME                                READY   STATUS      RESTARTS   AGE

    postgresql-1-deploy                 0/1     Completed   0          5m48s

    postgresql-1-lf7qt                  1/1     Running     0          5m40s

    rails-pgsql-persistent-1-build      0/1     Completed   0          5m49s

    rails-pgsql-persistent-1-deploy     0/1     Completed   0          3m36s

    rails-pgsql-persistent-1-hook-pre   0/1     Completed   0          3m28s

    rails-pgsql-persistent-1-pjh6q      1/1     Running     0          3m14s

    </pre>


    ---


    You can exit by pressing <kbd>Ctrl</kbd>+<kbd>C</kbd>


    Once the deployment is complete you can now test the application and the persistent
    storage on Ceph:


    *URL*  http://rails-pgsql-persistent-my-database-app.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/articles/


    The articles and comments are saved in a PostgreSQL database which stores its
    table spaces on the Ceph RBD volume provisioned using the `ocs-storagecluster-ceph-rbd`
    *storageclass* during the application deployment.


    To log in, use the following credentials:


    <pre>

    username: openshift

    password: secret

    </pre>


    If you want to clean your screen before continuing, just execute:

    ```

    clear

    ```

    ````

    '
  difficulty: basic
  notes:
  - contents: 'Make your first steps with the three persistent storage options in
      Openshift.


      ## Content


      In this scenario, we will discover three different persistent storage options:


      * RWO storage - suited for low-latency, high-performance applications like databases

      * RWX storage - suited for distributed applications that need a common place
      to store data

      <!-- * OBC storage - used to get application specific access credentials for
      object storage buckets -->

      '
    type: text
  slug: rwo
  tabs:
  - hostname: crc
    title: CLI
    type: terminal
  - hostname: crc
    path: /
    port: 30001
    title: Web Console
    type: service
  - hostname: crc
    path: /root
    title: Visual Editor
    type: code
  timelimit: 150
  title: Using RWO storage
  type: challenge
- assignment: "RWX storage is a special kind of storage that can be mounted on several\
    \ pods at the same time.\n\nWith ODF, each RWX storage device is backed by the\
    \ battle-tested and high-performance distributed filesystem known as CephFS.\n\
    \nThis storage type is well suited for scalable applications that need a shared\
    \ filesystem storage. An example of this are webservers that are dynamically scaled\
    \ up and down based on the amount of visitors.\n\nIn this section the `ocs-storagecluster-cephfs`\
    \ _Storage Class_ will be used to create a RWX (ReadWriteMany) PVC that can be\
    \ used by multiple pods at the same time. The application we will use is called\
    \ `File Uploader`.\n\nCreate a new project:\n\n```\noc new-project my-shared-storage\n\
    ```\n\nNext deploy the example PHP application called `file-uploader`:\n\n```\n\
    oc new-app openshift/php:7.2-ubi8~https://github.com/christianh814/openshift-php-upload-demo\
    \ --name=file-uploader\n```\n\n#### Sample Output:\n\n<pre>\n--> Found image 343298a\
    \ (4 months old) in image stream \"openshift/php\" under tag \"7.2-ubi8\" for\
    \ \"openshift/php:7.2-ubi8\"\n\n    Apache 2.4 with PHP 7.2\n    -----------------------\n\
    \    PHP 7.2 available as container is a base platform for building and running\
    \ various PHP 7.2 applications and frameworks. PHP is an HTML-embedded scripting\
    \ language. PHP attempts to make it easy for developers to write dynamically generated\
    \ web pages. PHP also offers built-in database integration for several commercial\
    \ and non-commercial database management systems, so writing a database-enabled\
    \ webpage with PHP is fairly simple. The most common use of PHP coding is probably\
    \ as a replacement for CGI scripts.\n\n    Tags: builder, php, php72, php-72\n\
    \n    * A source build using source code from https://github.com/christianh814/openshift-php-upload-demo\
    \ will be created\n      * The resulting image will be pushed to image stream\
    \ tag \"file-uploader:latest\"\n      * Use 'oc start-build' to trigger a new\
    \ build\n\n--> Creating resources ...\n    imagestream.image.openshift.io \"file-uploader\"\
    \ created\n    buildconfig.build.openshift.io \"file-uploader\" created\n    deployment.apps\
    \ \"file-uploader\" created\n    service \"file-uploader\" created\n--> Success\n\
    \    Build scheduled, use 'oc logs -f buildconfig/file-uploader' to track its\
    \ progress.\n    Application is not exposed. You can expose services to the outside\
    \ world by executing one or more of the commands below:\n     'oc expose service/file-uploader'\n\
    \    Run 'oc status' to view your app.\n</pre>\n\nWatch and wait for the application\
    \ to be deployed:\n\n```\noc logs -f bc/file-uploader -n my-shared-storage\n```\n\
    \n#### Sample Output:\n\n<pre>\nCloning \"https://github.com/christianh814/openshift-php-upload-demo\"\
    \ ...\n\n[...]\n\nPushing image image-registry.openshift-image-registry.svc:5000/my-shared-storage/file-uploader:latest\
    \ ...\nGetting image source signatures\nCopying blob sha256:38d76788a718aa4aeefa83bd12ccf249932c24713cb71a7172cb2bae0ff7e48c\n\
    Copying blob sha256:ec1681b6a383e4ecedbeddd5abc596f3de835aed6db39a735f62395c8edbff30\n\
    Copying blob sha256:35ad9b4fba1fa6b00a6f266303348dc0cf9a7c341616e800c2738030c0f64167\n\
    Copying blob sha256:c4d668e229cd131e0a8e4f8218dca628d9cf9697572875e355fe4b247b6aa9f0\n\
    Copying blob sha256:da1cc572023a942fff15d59aefa5abbb59d2c24a03966db8074ef8f9bab277d4\n\
    Copying blob sha256:121960b91b0d2c80b28494b15c026c2cc69f47f50b043b2b9f27b863d5b6d397\n\
    Copying config sha256:9c9e63275e81b86d3d3571740b06b805f7b0be47c5e2e1ac60197474af4361b2\n\
    Writing manifest to image destination\nStoring signatures\nSuccessfully pushed\
    \ image-registry.openshift-image-registry.svc:5000/my-shared-storage/file-uploader@sha256:1deccaded779afd9d761fffe93ae9a47d6fa29bc20b52eed37f5dd0766913fae\n\
    Push successful\n</pre>\n\nThe command prompt returns out of the tail mode once\
    \ you see _Push successful_.\n\n---\n\n**NOTE**\n\nThis use of the `new-app` command\
    \ directly asked for application code to be\nbuilt and did not involve a template.\
    \ That's why it only created a _single\nPod_ deployment with a _Service_ and no\
    \ _Route_.\n\n---\n\nLet's make our application production ready by exposing it\
    \ via a `Route` and scale to 3 instances for high availability:\n\n```\noc expose\
    \ svc/file-uploader -n my-shared-storage\n```\n\n```\noc scale --replicas=3 deploy/file-uploader\
    \ -n my-shared-storage\n```\n\n```\noc get pods -n my-shared-storage\n```\n\n\
    You should have 3 `file-uploader` _Pods_ in a few minutes. The additional `Route`\
    \ allows us to access the application from outside of the Openshift cluster.\n\
    \n---\n\n**CAUTION**\n\nNever attempt to store persistent data in a _Pod_ that\
    \ has no persistent\nvolume associated with it. _Pods_ and their containers are\
    \ ephemeral by\ndefinition, and any stored data will be lost as soon as the _Pod_\
    \ terminates\nfor whatever reason.\n\n---\n\nThe app is of course not useful like\
    \ this. We can fix this by providing shared\nstorage to this app.\n\nYou can create\
    \ a _PersistentVolumeClaim_ and attach it into an application with\nthe `oc set\
    \ volume` command. Execute the following\n\n````\noc set volume deploy/file-uploader\
    \ --add --name=my-shared-storage \\\n-t pvc --claim-mode=ReadWriteMany --claim-size=1Gi\
    \ \\\n--claim-name=my-shared-storage --claim-class=ocs-storagecluster-cephfs \\\
    \n--mount-path=/opt/app-root/src/uploaded \\\n-n my-shared-storage\n```\n`\n```\n\
    \nThis command will:\n\n* create a *PersistentVolumeClaim*\n* update the *DeploymentConfig*\
    \ to include a `volume` definition\n* update the *DeploymentConfig* to attach\
    \ a `volumemount` into the specified `mount-path`\n* cause a new deployment of\
    \ the 3 application *Pods*\n\nFor more information on what `oc set volume` is\
    \ capable of, look at its help output\nwith `oc set volume -h`. Now, let's look\
    \ at the result of adding the volume:\n\n```\noc get pvc -n my-shared-storage\n\
    ```\n\n#### Sample Output:\n\n<pre>\nNAME                STATUS   VOLUME     \
    \                                CAPACITY   ACCESS MODES   STORAGECLASS      \
    \          AGE\nmy-shared-storage   Bound    pvc-371c2184-fb73-11e9-b901-0aad1a53052d\
    \   1Gi        RWX            ocs-storagecluster-cephfs   47s\n</pre>\n\nNotice\
    \ the `ACCESSMODE` being set to *RWX* (short for `ReadWriteMany`).\n\nAll 3 `file-uploader`*Pods*\
    \ are using the same *RWX* volume. Without this `ACCESSMODE`, OpenShift will not\
    \ attempt to attach multiple *Pods* to the same *PersistentVolume*\nreliably.\
    \ If you attempt to scale up deployments that are using *RWO* or `ReadWriteOnce`\
    \ storage, the *Pods* will actually all become co-located on the same\nnode.\n\
    \nIf you want to clean your screen before continuing, just execute:\n```\nclear\n\
    ```\n````\n"
  difficulty: basic
  slug: rwx
  tabs:
  - hostname: crc
    title: CLI
    type: terminal
  - hostname: crc
    path: /
    port: 30001
    title: Web Console
    type: service
  - hostname: crc
    path: /root
    title: Visual Editor
    type: code
  timelimit: 150
  title: Using RWX storage
  type: challenge
description: 'Make your first steps with the three persistent storage options in Openshift.


  ## Content


  In this scenario, we will discover three different persistent storage options:


  * RWO storage - suited for low-latency, high-performance applications like databases

  * RWX storage - suited for distributed applications that need a common place to
  store data

  <!-- * OBC storage - used to get application specific access credentials for object
  storage buckets -->

  '
developers:
- dahmed@redhat.com
- nvinto@redhat.com
- rjarvine@redhat.com
icon: https://logodix.com/logo/1910931.png
level: beginner
owner: openshift
private: false
published: true
skipping_enabled: false
slug: persistence-persistent-intro
tags:
- openshift
title: Making Persistent Storage Calls in Your Application
type: track
