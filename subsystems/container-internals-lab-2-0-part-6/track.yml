slug: subsystems-container-internals-lab-2-0-part-6
id: ihpxr3zijgc9
type: track
title: Container Standards
description: |
  ## Background
  This lab is focused on understanding some of the container standards that govern this space. This will help you better architect your own environments, feeling more confident about where to invest.

  By the end of this lab you should be able to:
  - Explain the Image, Runtime, and Distribution specifications
  - Have a basic understanding of the major metadata files
  - Be able to start a container from scratch

  ## Outline
  - An overview of the three OCI specifications
  - The OCI image specification
  - The OCI runtime specification
  - The OCI reference implementation of the runtime specification (runc) and how to start a container

  ## Other Material
  - [Presentation](https://docs.google.com/presentation/d/1fC9cKR2-kFW5l-VEk0Z5_1vriYpROXOXM_5rhyVnBi4/edit#slide=id.g20639ff941_0_42)
  - [Lab GitHub Repository](https://github.com/openshift-labs/learn-katacoda)

  ## Start Scenario
  Once you have watched the background video or went throught the presentation, continue to the exercises
icon: https://logodix.com/logo/1910931.png
level: intermediate
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-overview
  id: mrbivh60c981
  type: challenge
  title: Overview of The OCI Specifications
  notes:
  - type: text
    contents: |
      ## Background
      This lab is focused on understanding some of the container standards that govern this space. This will help you better architect your own environments, feeling more confident about where to invest.

      By the end of this lab you should be able to:
      - Explain the Image, Runtime, and Distribution specifications
      - Have a basic understanding of the major metadata files
      - Be able to start a container from scratch

      ## Outline
      - An overview of the three OCI specifications
      - The OCI image specification
      - The OCI runtime specification
      - The OCI reference implementation of the runtime specification (runc) and how to start a container

      ## Other Material
      - [Presentation](https://docs.google.com/presentation/d/1fC9cKR2-kFW5l-VEk0Z5_1vriYpROXOXM_5rhyVnBi4/edit#slide=id.g20639ff941_0_42)
      - [Lab GitHub Repository](https://github.com/openshift-labs/learn-katacoda)

      ## Start Scenario
      Once you have watched the background video or went throught the presentation, continue to the exercises
  assignment: |
    The goal of this lab is to get a basic understanding of the three Open Containers Initiative (OCI) specificaitons that govern finding, running, building and sharing container - image, runtime, and distribution. At the highest level, containers are two things - files and processes - at rest and running. First, we will take a look at what makes up a [Container Repository](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.20722ydfjdj8) on disk, then we will look at what directives are defined to create a running [Container](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.j2uq93kgxe0e).

    If you are interested in a slightly deeper understanding, take a few minutes to look at the OCI  work, it's all publicly available in GitHub repositories:

    - [The Image Specification Overview](//github.com/opencontainers/image-spec/blob/master/spec.md#overview)
    - [The Runtime Specification Abstract](//github.com/opencontainers/runtime-spec/blob/master/spec.md)
    - [The Distributions Specification Use Cases](https://github.com/opencontainers/distribution-spec/blob/master/spec.md#use-cases)

    Now, lets run some experiments to better understand these specifications.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: intermediate
  timelimit: 375
- slug: 02-image-specification
  id: nfobybt3yj12
  type: challenge
  title: The OCI Image Specification
  assignment: |
    ## The Image Specification

    First, lets take a quick look at the contents of a container repository once it's uncompressed. We will use a utility you may have seen before called Podman. The syntax is nearly identical to Docker. Create a working directory for our experiment, then make sure the fedora image is cached locally:

    ``mkdir fedora
    cd fedora
    podman pull fedora``{{execute}}

    Now, export the image to a tar, file and extract it:
    ``podman save -o fedora.tar fedora
    tar xvf fedora.tar``{{execute}}

    Finally, let's take a look at three important parts of the container repository - these are the three major pieces that can be found in a container repository when inspected:

    1. Manifest - Metadata file which defines layers and config files to be used.
    2. Config - Config file which is consumed by the container engine. This config file is combined with user input specified at start time, as well as defaults provided by the container engine to create the runtime Config.json. This file is then handed to the continer runtime (runc) which communicates with the Linux kernel to start the container.
    3. Image Layers - tar files which are typically typically gzipped. They are merged together when the container is run to create a root file system which is mounted.

    In the Manifest, you should see one or more Config and Layers entries:

    ```
    cat manifest.json | jq
    ```

    In the Config file, notice all of the meta data that looks strikingly similar to command line options in Docker & Podman:

    ```
    cat $(cat manifest.json | awk -F 'Config' '{print $2}' | awk -F '["]' '{print $3}') | jq
    ```

    Each Image Layer is just a tar file. When all of the necessary tar files are extracted into a single directory, they can be mounted into a container's mount namespace:

    ```
    tar tvf $(cat manifest.json | awk -F 'Layers' '{print $2}' | awk -F '["]' '{print $3}')
    ```

    The take away from inspecting the three major parts of a container repository is that they are really just the wittiest use of tarballs ever invented. Now, that we understand what is on disk, lets move onto the runtime.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: intermediate
  timelimit: 375
- slug: 03-runtime-specification
  id: o77xurey2kb9
  type: challenge
  title: The OCI Runtime Specification
  assignment: |
    # The Runtime Specification

    This specification governs the format of the file that is passed to [Container Runtime](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo55). Every OCI compliant runtime will accept this file format, including runc, crun, Kata, gVisor, Railcar, etc. Typically, this file is constructed by a [Container Engine](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo3l) such as CRI-O, Podman, containerd or Docker. These files can be created manually, but it's a tedious process. Instead, we are going to do couple of experiments so that you can get a feel for this file without having to create one manually.

    Before we begin our experiments, you need to have a basic understanding of the inputs that go into creating this spec file:

    1. The [Container Image]() comes with a config.json which provides some input. We inspected this file in the last section on the image specification. These inputs are a combination of things provided by the image builder (Example: CMD) as well as defaults specified by the build tool (Example: Architecture). The inputs specified at build time can be thought of as a way for the image builder to communicate with the image consumer about how the image should be run.

    2. The container engine itself also provides some default inputs. Some of these can be configured in the configuration for the container engine (Example: SECCOMP profiles), some are dynamically generated by the container engine (Example: sVirt/SELinux contexts, or Bind Mounts - aka the copy on write layer which gets mounted in the container's namespace), while others are hardcoded into the container engine (Example: the default namespaces to utilize).

    3. The command line options specified by the user of the container engine (or robot in Kubernetes' case) can override many of the defaults provided in the image or by the container engine. Some of these are simple things like bind mounts (Example: -v /data:/data) or more complex like security options (Example: --privileged which disables a lot of technologies in the kernel).

    Now, let's start with some experiments. Being the reference implementation for the runtime specifiction, runc has the ability to create a very simple spec file. Let's create one and take a quick look at the fairly simple set of directives:

    ``runc spec
    cat config.json | jq``{{execute}}

    The simple file created by runc is a good introduction, but to truly understand the breadth of what a container engine does, we need to look at a more complex example. Podman has the ability to create a container and generate a spec file without actually starting the container:

    ``podman create --name fedora -t fedora bash
    podman init fedora``{{execute}}

    The "podman init" command generates a config.json and we can take a look at it in /var/lib/containers:

    ``cat $(find /var/lib/containers/ | grep  $(podman ps --no-trunc -q | tail -n 1)/userdata/config.json) | jq``{{Execute}}

    Take a minute to browse through the json output. See if you can spot directives which come from the container image, the container engine, and the user.

    Now that we have a basic understanding of the runtime spec file, lets move on to starting a container...
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: intermediate
  timelimit: 375
- slug: 04-runc
  id: d1qmg1yjrjaw
  type: challenge
  title: The OCI Runtime Reference Implementation
  assignment: |
    The goal of this lab is to learn how to use the container runtime to communicate with the Linux kernel to start a container. You will build a simple set of metadata, and start a container. This will give you insight into what the [Container Engine](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo3l) is actually doing every time you run a command.

    ## Setup

    To get runc to start a new container we need two main things:

    1. A filesystem to mount (often called a RootFS)

    2. A config.json file

    First, lets create (or steal) a RootFS, which is really nothing more than a Linux distribution extracted into a directory. Podman makes this ridiculously easy to to do. The following command will fire up a container, get the ID, mount it, then rsync the filesystem contents out of it into a directory:

    ```
    rsync -av $(podman mount $(podman create fedora bash))/ /root/fedora/rootfs/
    ```

    We have ourselves a RootFS directory to work with, check it out:

    ```
    ls -alh /root/fedora/rootfs
    ```

    Now that we have a RootFS, lets create a spec file and modify it:

    ``rm -rf /root/fedora/config.json
    runc spec -b /root/fedora/
    sed -i 's/"terminal": true/"terminal": false/' /root/fedora/config.json``{{execute}}

    Now, we have ourselves a full "bundle" which is a collequial way of referring to the RootFS and Config together in one directory:

    ```
    ls -alh /root/fedora
    ```

    ## Experiments

    First, lets create an empty container. This essentially creates the user space definition for the container, but no processes are spawned yet:

    ```
    runc create -b /root/fedora/ fedora
    ```

    List the created containers:

    ```
    runc list
    ```

    Now, lets execute a bash process in the container, so that we can see what's going on. Essentially, any number of processes can be exec'ed in the same namespace and they will all have access to the same PID table, Mount table, etc:

    ```
    runc exec --tty fedora bash
    ```

    It looks just like a normal container you would see with Podman, Docker or CRI-O inside of Kubernetes. That's because it is:

    ```
    ls
    ```

    Now, get out of the container:

    ```
    exit
    ```

    Delete it and verify that things are cleaned up. You may notice other containers running, that may be because other containers on the system are running in CRI-O, Podman, or Docker:

    ``runc delete fedora
    runc list``{{execute}}

    In summary, we have learned how to create containers with a terse little program called runc. This is the exact same program used by every major container engine on the planet. In production, you would never create containers like this, but it's useful to understand what is going on under the hood in CRI-O, Podman and Docker. When you run into new projects like Kata, gVisor, and others, you will now understand exactly how and where they fit in into the software stack.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: intermediate
  timelimit: 375
checksum: "3366149703004644030"
