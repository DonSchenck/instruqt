slug: using-the-cluster-deploy-prometheus-grafana
id: msaqzhk7farx
type: track
title: How to set up Prometheus and Grafana on OpenShift
description: |
  ## Goal

  Learn how to use [Prometheus](https://github.com/prometheus/prometheus) on OpenShift to collect metrics from an application and then visualize the results with [Grafana](https://github.com/grafana/grafana).

  ## Concepts

  * Prometheus, exporters, and application metrics
  * Grafana charts and graphs
  * OpenShift Web Console
  * `oc` OpenShift command line tool

  ## Use case

  You can analyze application metrics to spot problems, monitor performance, audit resource use, and improve your understanding of your application's behavior in order to improve it.

  This OpenShift cluster will self-destruct in one hour.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 1deploy-demo-app
  id: opgxhijpt52z
  type: challenge
  title: Step 1 - Example of Prometheus metrics being exposed by an application
  notes:
  - type: text
    contents: |
      ## Goal

      Learn how to use [Prometheus](https://github.com/prometheus/prometheus) on OpenShift to collect metrics from an application and then visualize the results with [Grafana](https://github.com/grafana/grafana).

      ## Concepts

      * Prometheus, exporters, and application metrics
      * Grafana charts and graphs
      * OpenShift Web Console
      * `oc` OpenShift command line tool

      ## Use case

      You can analyze application metrics to spot problems, monitor performance, audit resource use, and improve your understanding of your application's behavior in order to improve it.

      This OpenShift cluster will self-destruct in one hour.
  assignment: |
    ##Â Playing with the demo application

    The demo application is a simulated E-commerce food store application that also exposes some of it's metrics (the food store application might take up to an additional minute to be initialized).

    ### Generating some metrics

    The url for the food store is: http://metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/

    ![Demo Application Home Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/01-demo-app-home-page.png)

    * Once you are able to access the food store application, play around with it,
    try to buy the products you like [Everything here is free ;) ].
    * When you play around with the food store, you make the server serve some requests (GET/POST/..), <br>
    some of the metrics for these requests are generated and exposed for Prometheus to collect.

    ### Exposed metrics
    The exposed metrics can be found here: http://metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/metrics

    * This is the endpoint where Prometheus will scrape (collect) metrics from periodically and store them on a persistent storage device like a hard drive (Using [OpenShift PersistentVolumes](https://docs.openshift.com/container-platform/4.2/storage/understanding-persistent-storage.html#persistent-storage-overview_understanding-persistent-storage)).

    ![Demo Application Metrics Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/01-demo-app-metrics-page.png)

    * If you don't see similar metrics (pictured above) in your environment, try to make an order with the ecommerce application to generate a few metrics.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
- slug: 2deploy-prometheus
  id: ruepdfubnvrb
  type: challenge
  title: Step 2 - Deploying Prometheus to collect exposed metrics
  assignment: |2

    ### Namespace for monitoring

    We have created a [namespace](https://docs.openshift.com/container-platform/4.2/applications/projects/working-with-projects.html) called `pad-monitoring` on OpenShift where we will deploy all our monitoring applications (Prometheus and Grafana).

    * To make sure we are using our namespace run the following command: <br>
    ```
    oc project pad-monitoring
    ```

    * You can also go to the OpenShift console and login to the namespace [there](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/k8s/cluster/projects/pad-monitoring).

    * The credentials to access the OpenShift console are:
      * **Username:** ``developer``
      * **Password:** ``developer``

    ### Configure Prometheus for our application

    In OpenShift, we use ConfigMaps to manage configurations for our applications ([more info](https://docs.openshift.com/container-platform/3.11/dev_guide/configmaps.html#overview)).

    * We will use the following ConfigMap to set up our Prometheus instance.

    <pre class="file" data-filename="~/prometheus-configmap.yaml" data-target="replace">
    apiVersion: template.openshift.io/v1          # Click on 'Copy to Editor' --->
    kind: Template
    objects:
      - apiVersion: v1
        kind: ConfigMap
        metadata:
          name: prometheus-demo
          namespace: pad-monitoring
        data:
          prometheus.yml: |     # Prometheus configuration starts below
            global:
              external_labels:
                monitor: prometheus
            scrape_configs:
              - job_name: 'prometheus'

                static_configs:
                  - targets: ['localhost:9090'] # Configure Prometheus to scrape itself
                    labels:
                      group: 'prometheus'
    </pre>

    * Click on `Copy to Editor` for the above yaml block, to copy it to the editor.
    This will replace all the text in the editor with the above yaml text block

    * Now we need to edit the ConfigMap for our Prometheus deployment, so that Prometheus knows to scrape our demo application for metrics.
    To do that, we need to add the following section:

    <pre class="file" data-filename="~/prometheus-configmap.yaml">
                  - targets: ['metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com'] # Click on 'Copy to Editor'->
                    labels:
                      group: 'pad'
    </pre>

    In the above yaml block, we have defined a new targets list for our Prometheus to collect metrics from.

    This targets list has the hostname for our demo application, i.e. `metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com`

    By default Prometheus collects metrics from the `/metrics` http endpoint. ([More info](https://prometheus.io/docs/prometheus/latest/configuration/configuration/) on Prometheus Configuration)

    Above, you can see that we have added a label `group: 'pad'` <br>
    So all the metrics from our demo application can be
    queried with a singe PromQL query, i.e. `{group="pad"}`

    The ConfigMap file should be stored in a file named `prometheus-configmap.yaml`, <br>
    we will use it to update our Prometheus instance in the next step.

    ### Deploy Prometheus with new configuration

    * Once we have updated the configuration with our new target, we can go ahead and update this ConfigMap in our namespace: <br>
    ```
    oc process -f ~/prometheus-configmap.yaml | oc apply -f -
    ```

    * Update the Prometheus deployment using the following command: <br>
    ```
    oc rollout latest dc/prometheus-demo -n pad-monitoring
    ```

    After this, it might take a couple minutes for the Prometheus server to be ready to take requests.

    The Prometheus Console should be available [here](http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com)

    You can also use the [OpenShift dashboard](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/k8s/ns/pad-monitoring/deploymentconfigs/prometheus-demo) to check on the Prometheus deployment.

    * The credentials to access the OpenShift console are:
      * **Username:** ``developer``
      * **Password:** ``developer``

    ### Check if the configuration was updated successfully
    Once the Prometheus server is ready to take requests, <br>
    * Visit the targets page for Prometheus, [here](http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/targets). <br>
      The targets page should show you a list of targets that Prometheus has been configured to collect metrics from.

    It should look something like:
    ![Prometheus Targets Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/02-prometheus-targets-page.png)

    * If you cannot find the demo application, in the targets list, <br>
    Try to fix your Prometheus configuration in the ConfigMap file `prometheus-configmap.yaml` and repeat the previous step.

    ### Check application metrics
    * Once Prometheus is deployed, you can click [here](http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/graph?g0.range_input=1h&g0.expr={group%3D"pad"}) to see all the metrics for the demo application.
      This should query the Prometheus instance for all the metrics with the label `group="pad"`.

    * To learn more about the Prometheus query language or PromQL you can visit [this page](https://prometheus.io/docs/prometheus/latest/querying/basics/#querying-prometheus).
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
- slug: 3deploy-grafana
  id: fxui4ywi1tx0
  type: challenge
  title: Step 3 - Deploying Grafana to visualize Prometheus metrics
  assignment: |2


    ## Setting up Grafana to visualize metrics

    Now, we will deploy Grafana and connect it to our Prometheus instance, so we are able to visualize metrics better.

    ### Deploying Grafana

    * We can directly deploy the official [container image](https://hub.docker.com/r/grafana/grafana/) for Grafana using the following command: <br>
    ```
    oc new-app grafana/grafana:6.6.1 -n pad-monitoring
    ```

      You should see some output like this:

      ```
      --> Creating resources ...
          imagestream.image.openshift.io "grafana" created
          deploymentconfig.apps.openshift.io "grafana" created
          service "grafana" created
      --> Success
          Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
           'oc expose svc/grafana'
          Run 'oc status' to view your app.
      ```

    * Then we need to expose the service so that it is accessible outside of the cluster. <br>
    ```
    oc expose svc/grafana -n pad-monitoring
    ```

    * In about a minute, the Grafana console should be available at: <br>
    https://grafana-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com

    * You might see a warning like in the image below, this is because we don't generate valid ssl certificates for all our routes. You can click on `Advanced...` and then click on `Accept the Risk and Continue` to continue to the Grafana login page.

      ![Cert Warning Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-cert-warning-page.png)

    The default credentials for Grafana are:
      * username: `admin`
      * password: `admin`

      ![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-login-page.png)

    * Next it will prompt you to change the default credentials, <br>
    you can safely skip this for the purposes of this exercise.  <br>
    ![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-password-change-page.png)

    * Next you should see the Grafana Welcome page. <br>
    ![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-welcome-page.png)

    ### Configuring Grafana to visualize metrics from Prometheus

    * On the Grafana Welcome page, click on `Add data source` button to add Prometheus as a data source.

    * You should see a list of Grafana compatible data source types. You can type in `Prometheus` to filter the results. <br>
    ![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-add-ds-page.png)

    * When you click on the Prometheus Data Source, you should see the Data Source settings. <br>
    ![Grafana Login Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/03-grafana-add-prom-ds-page.png)

      * Fill the URL in the HTTP section with the Prometheus URL: <br>
    `http://prometheus-demo-route-pad-monitoring.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com`

      * Then click on `Save & Test`, this should test the connection to the Prometheus server.

    That's it, the connection between Grafana and Prometheus has been configured!
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
- slug: 4create-dashboard
  id: fyric26xunnb
  type: challenge
  title: Step 4 - Visualize metrics in Grafana
  assignment: |2


    ## Visualizing Metrics using Grafana

    Now, we will create a dashboard in Grafana and visualize a simple metric from the food store application.

    We will visualize a metric called `flask_http_request_total`, it is the total number of requests served by the food store application.

    ### Creating a Dashboard

    * Let's start with creating a dashboard for our visualizations.

    * In the left panel, click on `Create` and then select `Dashboard` <br>
    ![Grafana Create Dashboard Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-create-dashboard-page.png)


    ### Creating a Panel

    * You should see a New Panel like in the picture above. Click on `Add Query`.

      You can have multiple panels in a single dashboard, and each panel supports different types of visualizations ([more info](https://grafana.com/docs/grafana/latest/guides/getting_started/#all-users)).<br>
      But here we will just look at line charts as we are dealing with time-series data.

    * Below the graphing area, you should have an empty text box for your PromQL queries. <br>
    Enter your query `flask_http_request_total`
    ![Grafana Create Panel Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-create-panel-page.png)

    * In the upper right corner, you can change the graphing duration. <br>
    Change the duration to `Last 5 minutes`. <br>

      *you can choose any other value as well just keep in mind
    that we have just set up the food store application monitoring, so only very recent metric values might be available.*

    * Once you can see some lines in your graphing area, click on the left arrow (`<-`) in the upper left corner.

    * Now you should have a dashboard with a single panel, let's add another panel with a different metric.
    ![Grafana Create Panel Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-1-panel-dashboard-page.png)

    * In the upper right corner of the dashboard page, click on `Add Panel` and repeat the previous steps only this time
    use a different query. <br>
    `rate(flask_http_request_total[2m])` this should give you the rate of requests served by the application over 2 minutes.

    * Once you have set up the second panel, your dashboard should look something like this <br>
    ![Grafana Create Panel Page](https://katacoda.com/openshift/assets/introduction/deploy-prometheus-grafana/04-grafana-2-panel-dashboard-page.png)

    If you want to see live changes to the dashboard, go to the [food store application page](http://metrics-demo-app-metrics-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/) and make some purchases. <br>
    Then click on the refresh button in the upper right corner.

    That's it! you should have your own monitoring dashboard now.

    **You can do a lot more with dashboards like saving them, exporting as jsons, using variables, etc. <br>
    You can learn more about dashboards [here](https://grafana.com/docs/grafana/latest/features/dashboard/dashboards/)**
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 225
checksum: "14372340991717341441"
