slug: gitops-syncwaves-hooks
id: x4sq3mhjp9sc
type: track
title: Syncwaves and Hooks
description: |
  ## Goal

  This scenario will get you get familiar with syncwaves and hook phases.


  ## Concepts

  [Syncwaves](https://argoproj.github.io/argo-cd/user-guide/sync-waves/)
  are used in Argo CD to order how manifests
  are applied to the cluster. Whereas [resource hooks](https://argoproj.github.io/argo-cd/user-guide/resource_hooks/)
  breaks up the delivery of these manifests in different phases.

  ![ArgoCD Logo](../../assets/gitops/argocd-logo.png)

  [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous delivery tool for Kubernetes.

  Using a combination of syncwaves and resource hooks, you can control how your application rolls out.

  ## Use case

  This is a simple guide that takes you through the following steps:

  * Using Syncwaves to order deployment
  * Exploring Resource Hooks
  * Using Syncwaves and Hooks together

  This OpenShift cluster will self-destruct in one hour.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-using-syncwaves
  id: jv1yo6nlycw0
  type: challenge
  title: Using Syncwaves
  notes:
  - type: text
    contents: |
      ## Goal

      This scenario will get you get familiar with syncwaves and hook phases.


      ## Concepts

      [Syncwaves](https://argoproj.github.io/argo-cd/user-guide/sync-waves/)
      are used in Argo CD to order how manifests
      are applied to the cluster. Whereas [resource hooks](https://argoproj.github.io/argo-cd/user-guide/resource_hooks/)
      breaks up the delivery of these manifests in different phases.

      ![ArgoCD Logo](../../assets/gitops/argocd-logo.png)

      [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous delivery tool for Kubernetes.

      Using a combination of syncwaves and resource hooks, you can control how your application rolls out.

      ## Use case

      This is a simple guide that takes you through the following steps:

      * Using Syncwaves to order deployment
      * Exploring Resource Hooks
      * Using Syncwaves and Hooks together

      This OpenShift cluster will self-destruct in one hour.
  assignment: |
    Welcome! In this section we will be exploring how to use syncwaves with
    Argo CD.

    ## Background

    A Syncwave is a way to order how Argo CD applies the manifests that are
    stored in git. All manifests have a wave of zero by default, but you can
    set these by using the `argocd.argoproj.io/sync-wave` annotation. Example:

    ```yaml
    metadata:
      annotations:
        argocd.argoproj.io/sync-wave: "2"
    ```

    The wave can also be negative as well.

    ```yaml
    metadata:
      annotations:
        argocd.argoproj.io/sync-wave: "-5"
    ```

    When Argo CD starts a sync action, the manifest get placed in the following order:

    * The Phase that they're in (we'll cover phases in the next section)
    * The wave the resource is annotated in (starting from the lowest value to the highest)
    * By kind (Namspaces first, then services, then deployments, etc ...)
    * By name (ascending order)

    Read more about syncwaves on the [official documentation site](https://argoproj.github.io/argo-cd/user-guide/sync-waves/#how-do-i-configure-waves)

    ## Exploring Manifests

    The manifests that will be deployed have been annotated with the following values:

    * The Namspace with `0` `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves/welcome-php-ns.yaml`
    * The Deployment with `1` `openshift-gitops-examples/apps/welcome-php/base/welcome-php-deployment.yaml`
    * The Service with `2` `openshift-gitops-examples/apps/welcome-php/base/welcome-php-svc.yaml`
    * Finally the Route with `3` `openshift-gitops-examples/apps/welcome-php/base/welcome-php-route.yaml`

    Argo CD will apply the Namespace first (since it's the lowest value),
    and make sure it returns a "healthy" status before moving on.

    Next, the Deployment will be applied. After that reports healthy, Argo
    CD will apply the Service then the Route.

    > **NOTE** Argo CD won't apply the next manifest until the previous reports "healthy".

    ## Deploying The Application

    Before we deploy this application, make sure you've opened the Argo CD
    Web Console.

    To get to the Argo CD Web UI; click the [Argo CD Web Console](https://openshift-gitops-server-openshift-gitops.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com) tab.

    Once you have accepted the self signed certificate, you should be
    presented with the Argo CD login screen.

    ![ArgoCD Login](https://katacoda.com/openshift/assets/gitops/argocd-login.png)

    You can login with the following
    * **Username:** ``admin``
    * **Password:** ```
    oc extract secret/openshift-gitops-cluster -n openshift-gitops --to=-
    ```

    Apply the Argo CD `Application` manifest to get this application deployed.

    ```
    oc apply -f ~/resources/openshift-gitops-examples/components/applications/welcome-syncwaves.yaml
    ```

    This should create the `welcome-syncwaves` application.

    ![welcome-syncwaves](https://katacoda.com/openshift/assets/gitops/welcome-syncwaves.png)

    Clicking on this "card" will take you to the application overview
    page. Clicking on "show hidden resources" should expand the "tree"
    view.

    ![welcome-syncwaves-tree](https://katacoda.com/openshift/assets/gitops/welcome-syncwaves-tree.png)

    If you follow along, you'll note that these manfiests get applied in
    order of their annotated syncwave!

    Keep the Argo CD WebUI tab open for the next exercise.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 600
- slug: 02-exploring-resource-hooks
  id: tgyhn1d9xzob
  type: challenge
  title: Exploring Resource Hooks
  assignment: |-
    Now that you're familiar with syncwaves, we can begin exploring applying
    manifests in phases using `resource hooks`.

    ## Background

    Controlling your sync operation can be futher redefined by using
    hooks. These hooks can run before, during, and after a sync
    operation. These hooks are:

    * **PreSync** - Runs before the sync operation. This can be something like a database backup before a schema change
    * **Sync** - Runs after `PreSync` has successfully ran. This will run alongside your normal manifesets.
    * **PostSync** - Runs after `Sync` has ran successfully. This can be something like a Slack message or an email notification.
    * **SyncFail** - Runs if the `Sync` operation as failed. This is also used to send notifications or do other evasive actions.

    To enable a sync, annotate the specific object manfiest with
    `argocd.argoproj.io/hook` with the type of sync you want to use for that
    resource. For example, if I wanted to use the `PreSync` hook:

    ```yaml
    metadata:
      annotations:
        argocd.argoproj.io/hook: PreSync
    ```

    You can also have the hooks be deleted after a successful/unsuccessful run.

    * **HookSucceeded** - The resouce will be deleted after it has succeeded.
    * **HookFailed** - The resource will be deleted if it has failed.
    * **BeforeHookCreation** - The resource will be deleted before a new one is created (when a new sync is triggered).

    You can apply these with the `argocd.argoproj.io/hook-delete-policy`
    annotation. For example

    ```yaml
    metadata:
      annotations:
        argocd.argoproj.io/hook: PostSync
        argocd.argoproj.io/hook-delete-policy: HookSucceeded
    ```

    > **NOTE** Since a sync can fail in any phase, you can come to a situation where the application never reports healthy!

    Although hooks can be any resource, they are usually Pods and/or Jobs.

    To read more about resource hooks, consult the [official documentation](https://argoproj.github.io/argo-cd/user-guide/resource_hooks)

    ## Exploring Manifests

    I will be adding the following manifest to the first
    application deployed. Take a look at the manfiest
    `openshift-gitops-examples/apps/welcome-php/overlays/hooks/welcome-php-presync-job.yaml`

    You'll see that I have the annotation `argocd.argoproj.io/hook: PreSync`
    set. This means that this Job will run in the `PreSync` phase, before
    the application of the manifests in the `Sync` phase.

    > **NOTE** Since I don't have a deletion policy, this job will "stick around" after completion.

    ## Deploying The Application

    This sample will be using `kustomize` to create a new application based
    on the one we previously deployed; while adding the `Job`
    with the resource hook. You can see this by [visiting the repo](https://github.com/redhat-developer-demos/openshift-gitops-examples/tree/main/apps/welcome-php/overlays/hooks)

    Taking a look at the manifest file `openshift-gitops-examples/components/applications/welcome-hooks.yaml`
    will show that this will deploy the application in the `welcome-hooks`
    namespace.

    Create this application ```
    oc apply -f ~/resources/openshift-gitops-examples/components/applications/welcome-hooks.yaml
    ```

    On the Argo CD WebUI, you should see another application appear.

    ![hooks-card](https://katacoda.com/openshift/assets/gitops/hooks-card.png)

    Clicking on this "card" should take you over to the tree view.

    ![hooks-tree](https://katacoda.com/openshift/assets/gitops/hooks-tree.png)

    Observe the sync process. You will see that the `PreSync` manifest has
    an anchor icon âš“ . You will also notice that the other manifests don't
    start applying until the `PreSync` Job is done.

    Once the application is fully synced. Take a look at the pods and jobs in
    the namespace: ```
    oc get pods,jobs -n welcome-hooks
    ```

    You should see that the Job is finished, but still there.

    ```shell
    NAME                               READY   STATUS      RESTARTS   AGE
    pod/welcome-php-6986bd99c4-7w7qk   1/1     Running     0          2m43s
    pod/welcome-presyncjob-l9h8n       0/1     Completed   0          3m14s

    NAME                           COMPLETIONS   DURATION   AGE
    job.batch/welcome-presyncjob   1/1           30s        3m14s
    ```

    Keep this tab open, in the next exercise. We will see how to use Syncwaves
    and Hooks in tandem!
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 600
- slug: 03-using-syncwaves-and-hooks
  id: 6d6icwg4a0oz
  type: challenge
  title: Using Syncwaves and Hooks Together
  assignment: |
    Now that you got your hands on syncwaves and resource hooks, you will
    now use them together to see how you can control how your deployment
    rolls out.

    ## Background

    In the previous sections you learned how to order the application
    of manifests using syncwaves. You also went over how you phase your
    deployments with resource hooks.

    In this section we will use syncwaves within each phase to show how you
    can further refine the deployment process.

    Take a look at the following diagram.

    ![resource-wave-hooks](https://katacoda.com/openshift/assets/gitops/resource-hooks.png)

    The workflow can be summarized like this:

    * The `PreSync` phase will run and manifests will be applied in their syncwave order.
    * Once the `PreSync` phase is successful, the `Sync` phase begins.
    * The `Sync` phase will apply the manifests in the their syncwave order
    * Finally, after the `Sync` phase is done, the `PostSync` phase applies the manifests in the syncwave order.

    ## Exploring Manifests

    Using Kustomize, we will be adding 3 addition manifests.

    * A `PreSync` Job with a syncwave of 0 `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves-and-hooks/welcome-php-presync-job.yaml`
    * A `PreSync` Pod with a syncwave of 1 and a hook deletion policy `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves-and-hooks/welcome-php-presync-pod.yaml`
    * A `PostSync` Pod with a hook deletion policy `openshift-gitops-examples/apps/welcome-php/overlays/syncwaves-and-hooks/welcome-php-postsync-pod.yaml`

    The manifest will apply in the following order.

    * `PreSync` - The Job will start and finish. The the Pod will start and finish. Once these are both done successfully the `PreSync` phase is considered "done".
    * `Sync` - All the manifests will apply in their respective syncwave order. Once this is done successfully, the `Sync` phase is considered done.
    * `PostSync` - The Pod will start and finish. Once it's successfully finished, the resource is deleted.


    ## Deploying the Application

    Take a look at the manifest file `openshift-gitops-examples/components/applications/welcome-syncwaves-and-hooks.yaml`

    As before, we are using Kustomize to deploy the same application,
    but in a different namespace and we are loading in the 3 additional
    manifests. You can see the specific implementation in the [git repo](https://github.com/redhat-developer-demos/openshift-gitops-examples/tree/main/apps/welcome-php/overlays/syncwaves-and-hooks)

    Create this application ```
    oc apply -f ~/resources/openshift-gitops-examples/components/applications/welcome-syncwaves-and-hooks.yaml
    ```

    This should create the 3rd application on Argo CD.

    ![waves-and-hooks-card](https://katacoda.com/openshift/assets/gitops/waves-and-hooks-card.png)

    Clicking on this card should take you to the tree view.

    ![waves-and-hooks-tree](https://katacoda.com/openshift/assets/gitops/waves-and-hooks-tree.png)

    Here you can observe the sync process happening in the order
    specified. You will also note that the `PreSync` Pod and the `PostSync`
    pod were deleted after the sync process because of the deletion policy
    annotation.

    Take a look to verify: ```
    oc get pods,jobs -n welcome-waves-and-hooks
    ```

    You should see the following output.

    ```shell
    NAME                               READY   STATUS      RESTARTS   AGE
    pod/welcome-php-6986bd99c4-vv499   1/1     Running     0          4m52s
    pod/welcome-presyncjob-8jtqj       0/1     Completed   0          5m24s

    NAME                           COMPLETIONS   DURATION   AGE
    job.batch/welcome-presyncjob   1/1           18s        5m24s
    ```
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 600
checksum: "18349337197685920808"
