slug: gitops-working-with-helm
id: 5fe6ueeeypty
type: track
title: Working with Helm
description: |
  ## Goal

  This scenario will get you get familiar with how to use Argo CD to deploy
  Helm charts.


  ## Concepts

  [Helm](https://helm.sh/) is a package manager for Kubernetes
  applications. You can define, install, and update your pre-packaged
  applications. This is a way to bundle up, and deliver prebuilt Kubernetes
  applications.


  ![Helm Logo](../../assets/gitops/helm-logo.png)

  [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous delivery tool for Kubernetes.

  Using Argo CD, you can still use your Helm charts to deploy and manage your Applications.

  ## Use case

  This is a simple guide that takes you through the following steps:

  * Use the native Helm integration in Argo CD
  * Explore a more GitOps friendly approach to Helm chart deployments

  This OpenShift cluster will self-destruct in one hour.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- rjarvine@redhat.com
- nvinto@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-helm-integration
  id: 57dyymuekbzf
  type: challenge
  title: Helm Integration
  notes:
  - type: text
    contents: |
      ## Goal

      This scenario will get you get familiar with how to use Argo CD to deploy
      Helm charts.


      ## Concepts

      [Helm](https://helm.sh/) is a package manager for Kubernetes
      applications. You can define, install, and update your pre-packaged
      applications. This is a way to bundle up, and deliver prebuilt Kubernetes
      applications.


      ![Helm Logo](../../assets/gitops/helm-logo.png)

      [Argo CD](https://argoproj.github.io/argo-cd/) is a declarative, GitOps continuous delivery tool for Kubernetes.

      Using Argo CD, you can still use your Helm charts to deploy and manage your Applications.

      ## Use case

      This is a simple guide that takes you through the following steps:

      * Use the native Helm integration in Argo CD
      * Explore a more GitOps friendly approach to Helm chart deployments

      This OpenShift cluster will self-destruct in one hour.
  assignment: |-
    Welcome! In this section we will be exploring the native Helm integration
    within Argo CD.

    ## Background

    Helm has become the defacto way of packaging up and deploying application
    stacks on Kubernetes. You can think of Helm as sort of a package manager
    for Kubernetes. The main components of Helm are:

    * `Chart` a package consisting of related Kubernetes YAML files used to deploy something (Application/Application Stack/etc).
    * `Repository` a place where Charts can be stored, shared and distributed.
    * `Release` a specific instance of a Chart deployed on a Kubernetes cluster.

    Helm works by the user providing parameters (most of the time via a YAML
    file) against a Helm chart via the CLI. These parameters get injected
    into the Helm template YAML to produce a consumable YAML that us deployed
    to the Kubernetes cluster.

    ![helm-overview](https://katacoda.com/openshift/assets/gitops/helm-overview.png)

    Argo CD has native support for Helm built in. You can directly
    call a Helm chart repo and provide the values directly in the
    [Application](https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#applications)
    manifest. Furthermore, you can interact and manage the Helm release on
    your cluster directly with Argo CD via the UI or the CLI.

    In this scenario, we will explore how to deploy a Helm chart using the
    native integration in Argo CD.

    ## Exploring Manifests

    You can specify your Helm repo, chart, and values directly in the
    `Application` manfiest for Argo CD. Let's take a look at the example
    we're going to deploy. `openshift-gitops-examples/components/applications/quarkus-app.yaml`

    This `Application` deploys a sample Quarkus application. If you take
    a look at the file, you can see the specific configuration under
    `.spec.source.helm`. Let's take a look at this section/snippet of
    the YAML:

    ```yaml
    spec:
      source:
        helm:
          parameters:
            - name: build.enabled
              value: "false"
            - name: deploy.route.tls.enabled
              value: "true"
            - name: image.name
              value: quay.io/ablock/gitops-helm-quarkus
        chart: quarkus
        repoURL: https://redhat-developer.github.io/redhat-helm-charts
        targetRevision: 0.0.3
    ```

    Let's break this `.spec.source.helm` section down a bit:

    * `parameters` - This section is where you'll enter the parameters you want to pass to the Helm chart. These are the same values that you'd have in your `Values.yaml` file.
    * `chart` - This is the name of the chart you want to deploy from the Helm Repository.
    * `repoURL` - This is the URL of the Helm Repository.
    * `targetRevision` - This is the version of the chart you want to deploy.

    This can be used to deploy the Helm chart on to your cluster, which is like using `helm install ...`.

    > **NOTE** What actually happens is that Argo CD
    > runs a `helm template ... | kubectl apply -f -`. We'll go over that
    > a little later


    ## Deploying The Application

    Before we deploy this application, make sure you've opened the Argo CD
    Web Console.

    To get to the Argo CD Web UI; click the [Argo CD Web Console](https://openshift-gitops-server-openshift-gitops.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com) tab.

    Once you have accepted the self signed certificate, you should be
    presented with the Argo CD login screen.

    ![ArgoCD Login](https://katacoda.com/openshift/assets/gitops/argocd-login.png)

    You can login with the following
    * **Username:** ``admin``
    * **Password:** ```
    oc extract secret/openshift-gitops-cluster -n openshift-gitops --to=-
    ```

    Apply the Argo CD `Application` manifest to get this Helm chart deployed.

    ```
    oc apply -f ~/resources/openshift-gitops-examples/components/applications/quarkus-app.yaml
    ```

    This should create the `quarkus-app` application. Note the Helm icon
    âŽˆ denoting it's a Helm application.

    ![quarkus-app](https://katacoda.com/openshift/assets/gitops/quarkus-app.png)

    Clicking on this "card" will take you to the application overview
    page. Clicking on "show hidden resources" should expand the "tree"
    view.

    ![quarkus-app-tree](https://katacoda.com/openshift/assets/gitops/quarkus-app-tree.png)

    Grab the URL by running the following command: ```
    oc get route/quarkus-app -n demo  -o jsonpath='{.spec.host}{"\n"}'
    ```

    If you visit [that URL](https://quarkus-app-demo.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com), you should see the following page.


    ![gitops-loves-helm](https://katacoda.com/openshift/assets/gitops/gitops-loves-helm.png)

    You can now interact with this `Application` using the `argocd` CLI. For instance; if I want to change the scale of my application to 2 replicas, I just modify that value using the `argocd` CLI.

    First, check to see how many pods you have running: ```
    oc get pods -n demo
    ```

    The output should look like this.

    ```shell
    NAME                           READY   STATUS              RESTARTS   AGE
    quarkus-app-58f475cb86-rddz2   1/1     Running             0          14m
    ```

    Now, modfy the Helm values: ```
    argocd app set quarkus-app -p deploy.replicas=2
    ```

    You should now have 2 pods for this ```
    Application`: `oc get pods -n demo
    ```

    There will now be two pods.

    ```shell
    NAME                           READY   STATUS              RESTARTS   AGE
    quarkus-app-58f475cb86-rddz2   1/1     Running             0          15m
    quarkus-app-58f475cb86-s9llq   0/1     ContainerCreating   0          1s
    ```

    The Argo CD UI should show the application with 2 pods and fully healthy/in sync.

    ![quarkus-2-pods](https://katacoda.com/openshift/assets/gitops/quarkus-2-pods.png)

    This is a valid, and completely supported way of deploying your Helm
    charts using Argo CD. But this isn't GitOps friendly. Lets see how we
    can use Helm in a GitOps workflow.

    Keep the Argo CD WebUI tab open for the next exercise, where we'll
    explore a more GitOps friendly way of deploying Helm charts.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 900
- slug: 02-helm-gitops
  id: ocwmalrtw1lm
  type: challenge
  title: Helm GitOps Deployment
  assignment: |
    In this section, we will be exporting GitOps deployment patterns with
    Helm!

    ## Background

    In the previous section, you saw how you can deploy a Helm chart
    natively with Argo CD. This method had you providing the Helm Repo,
    Chart, and Values directly in the config. Before, it was mentioned that, although
    valid, it's not GitOps friendly.

    In a GitOps workflow, the state of your application deployment must be
    stored in a SCM repo (like GitHub). In order to do this you must save the
    `values.yaml` in a git repo and reference the Helm repo somehow.

    This is where the [Helm Subchart/Dependency](https://github.com/argoproj/argocd-example-apps/blob/master/helm-dependency/README.md)
    deployment strategy comes in.

    ## Exploring Manifests

    We will be using the [examples repo](https://github.com/redhat-developer-demos/openshift-gitops-examples) for this and we will be targeting the [quarkus-subchart](https://github.com/redhat-developer-demos/openshift-gitops-examples/tree/main/apps/quarkus-subchart) directory. This has already been cloned into your environment you can take a look at it by running:

    ```
    tree ~/resources/openshift-gitops-examples/apps/quarkus-subchart
    ```

    This should have the following output.

    ```shell
    openshift-gitops-examples/apps/quarkus-subchart
    â”œâ”€â”€ Chart.yaml
    â””â”€â”€ values.yaml

    0 directories, 2 files
    ```

    As you can see, this is made up of only two YAML files. The `Chart.yaml` file and the `values.yaml` file. Take a look at the chart file:

    `openshift-gitops-examples/apps/quarkus-subchart/Chart.yaml`

    This `Chart.yaml` file, is creating an "empty" Helm chart and adding the Helm chart you want to deploy as a dependency in the `dependecies` secion.

    > **NOTE** You can deploy more than one Helm chart using this method.

    The next file is the `values.yaml` file. Take a look at that file.

    `openshift-gitops-examples/apps/quarkus-subchart/values.yaml`

    Here you're specifying the values you want to pass to the Helm chart.

    This is more GitOps friendly as now the state of your deployment is
    stored in a git repo. You can now use git workflows to update this
    application if, for example, you want to change the image or the number of
    replicas. You can now PR into this repo as you would in a GitOps workflow.

    The Argo CD `Application` should look like a "normal" `git` application.

    `openshift-gitops-examples/components/applications/quarkus-subchart.yaml`

    In this snippet, you can see that now we're targeting the git repo instead of the Helm repo.

    ```yaml
      source:
        path: apps/quarkus-subchart/
        repoURL: https://github.com/redhat-developer-demos/openshift-gitops-examples
        targetRevision: main
    ```

    Let's deploy this application!

    ## Deploying The Application

    Before we deploy this application, make sure you've opened the Argo CD
    Web Console.

    Like in the previous Step, open the Argo CD Web UI by clicking the [Argo CD Web Console](https://openshift-gitops-server-openshift-gitops.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com) tab.

    Apply the Argo CD `Application` manifest to get this Helm chart deployed.

    ```
    oc apply -f ~/resources/openshift-gitops-examples/components/applications/quarkus-subchart.yaml
    ```

    This should create the application.

    > **NOTE** The Helm logo âŽˆ does not appear. It's now a git logo since we're now just loading YAML

    ![quarkus-subchart-app](https://katacoda.com/openshift/assets/gitops/quarkus-subchart-app.png)

    Clicking on this "card" will take you to the application overview
    page. Click on "show hidden resources" if you need to, to expand the
    "tree" view.

    ![quarkus-subchart-app-tree](https://katacoda.com/openshift/assets/gitops/quarkus-subchart-app-tree.png)

    That's it! You've now deployed a Helm chart in a GitOps friendly way
    using Argo CD!

    There is one important thing to note. We've deployed this Helm chart
    twice, and you can see this using the argocd CLI:

    ```
    argocd app list -o name
    ```

    This should have the following output:

    ```shell
    quarkus-app
    quarkus-subchart
    ```

    You can also see this on the cluster itself:

    ```
    oc get applications -n openshift-gitops
    ```

    This should have an output similar to this.

    ```shell
    NAME               SYNC STATUS   HEALTH STATUS
    quarkus-app        Synced        Healthy
    quarkus-subchart   Synced        Healthy
    ```

    However, when you try and list the applications using the Helm CLI; you don't see it.

    ```
    helm ls --all-namespaces
    ```

    This should show no Helm releases.

    ```shell
    NAME    NAMESPACE       REVISION        UPDATED STATUS  CHART   APP VERSION

    ```

    This is because of how Argo CD deploys the Helm charts. When Argo CD
    deploys a Helm chart, it deploys it by running `helm template` and
    piping that into `kubectl apply -f`. Which means that Argo CD converts
    Helm templates (with the values provided) into "raw", Kubernetes YAML.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 900
checksum: "18199660565674562602"
