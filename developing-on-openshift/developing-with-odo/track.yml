slug: developing-on-openshift-developing-with-odo
id: dnttxho7bem5
type: track
title: Developing with odo
description: |
  ## Goal

  Learn how to use the *OpenShift Do* (`odo`) command line tool to build and deploy applications on OpenShift.

  ## Concepts

  * `odo` developer tool abstracts deployment tasks
  * OpenShift Projects and Applications
  * OpenShift Web Console’s Developer Perspective
  * Multi-tiered applications with a web frontend
  * Automatic OpenShift Builds for iterative development

  ## Use case

  Odo is a developer-centric tool for building and running software on OpenShift. Odo streamlines common build and deployment tasks to let you focus on your application’s source code. You can use odo to reduce the cognitive load and rote steps that are typically involved when working on complex applications built using a mixed stack of component solutions.

  This OpenShift cluster will self-destruct in one hour.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 00-application-overview
  id: ngzqeexpxxjo
  type: challenge
  title: Application Overview
  notes:
  - type: text
    contents: |
      ## Goal

      Learn how to use the *OpenShift Do* (`odo`) command line tool to build and deploy applications on OpenShift.

      ## Concepts

      * `odo` developer tool abstracts deployment tasks
      * OpenShift Projects and Applications
      * OpenShift Web Console’s Developer Perspective
      * Multi-tiered applications with a web frontend
      * Automatic OpenShift Builds for iterative development

      ## Use case

      Odo is a developer-centric tool for building and running software on OpenShift. Odo streamlines common build and deployment tasks to let you focus on your application’s source code. You can use odo to reduce the cognitive load and rote steps that are typically involved when working on complex applications built using a mixed stack of component solutions.

      This OpenShift cluster will self-destruct in one hour.
  assignment: |
    The application you will be deploying is a wild west shooter style game.

    Applications are often divided into components based on a logical division of labor. For example, an application might consist of a data-storage, backend component that performs the application's primary work and stores the results. The backend component is paired with a user interface, frontend component that accesses the backend to retrieve data and displays it to a user.

    The application deployed in this tutorial consists of two such components.

    ## Backend

    The backend is a Java Spring Boot application. It performs queries against the Kubernetes and OpenShift REST APIs to retrieve a list of the resource objects that were created when you deployed the application. Then, it returns details about these resource objects to the frontend.

    ## Frontend

    The frontend is the user interface for a wild west style game written in Node.js. It displays popup images which you can shoot, corresponding to the resource objects returned by the backend.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
- slug: 01-creating-initial-project
  id: tam8dhs0g0uc
  type: challenge
  title: Creating an Initial Project
  assignment: |
    ## Logging in to OpenShift

    Before we get started, you need to log in to OpenShift. To log in to the OpenShift cluster used for this scenario from the _Terminal_,
    run:

    ```
    odo login -u developer -p developer
    ```

    This will log you in using the credentials:

    * **Username:** ``developer``
    * **Password:** ``developer``

    You should see the output below:

    ```
    Connecting to the OpenShift cluster

    Login successful.

    You don't have any projects. You can try to create a new project, by running
        odo project create <project-name>
    ```

    We will start by creating a new project by running `odo project create`:

    ```
    odo project create myproject
    ```

    You should see the following output confirming the creation of a new OpenShift project called `myproject` and that `odo` is now using `myproject`:

    ```
     ✓  Project 'myproject' is ready for use
     ✓  New project created and now using project : myproject
    ```

    ## Creating a Service Account
    The backend of our application uses the OpenShift REST API. In order for the backend to access the API, we need to grant access to the service account that the backend is using. We will do this in the web console.

    Click the **Console** tab next to the **Terminal** tab near the center top of your browser. This opens the OpenShift web console.

    You should see an OpenShift window with **Username** and **Password** fields, which is similar to this one:

    ![OCP Web Console](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/ocp-login.png)

    For this scenario, start by entering the following:

    **Username:** ``developer``

    **Password:** ``developer``

    After logging in to the web console, you'll be in the **Administrator** perspective of the web console, which is a view of the console for handling operations and administrative tasks associated with your OpenShift cluster.

    To start, select the project you just created using `odo` (i.e. `myproject`) by clicking on `myproject` on the **Projects** page as shown below:

    ![Projects](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/myproject.png)

    By clicking on the project name, you will be taken to the **Project Details** page that shows information about what is happening in your project. By clicking on the project name, you are also now using this project and all actions via the web console will now happen in this project.

    On the left side of the console, click the **Administration** tab and select the **RoleBindings** option as shown below:

    ![Role Binding](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/role-binding.png)

    On the **RoleBindings** page, click the **Create Binding** button and fill out the wizard with the information shown below:

    ![Role Binding Wizard](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/role-binding-wizard.png)

    Feel free to copy the information for the role binding name and service account subject name below:

    **Role Binding Name:** ``defaultview``

    **Subject Name:** ``default``

    Alternatively, this step can be completed via the command line by running `oc adm policy add-role-to-user view --rolebinding-name=defaultview -z default`

    The default service account provided to the backend container will now have **view** access, allowing it can retrieve objects via the API. Note that you could choose to grant access to the **edit** role instead. Providing **edit** access would allow the backend to view, modify, or delete objects. Enabling this level of access allows the backend to destroy non-recoverable resources that are used to host the game (breaking the user-experience for app users) - which is why we are using **view** access for this scenario.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
- slug: 02-creating-new-binary-component
  id: z5tera1vq7q3
  type: challenge
  title: Creating new binary component
  assignment: |
    As mentioned, applications often consist of two or more components that work together to implement the overall application. OpenShift helps organize these modular applications with a concept called, appropriately enough, the application. An OpenShift application represents all of an app's components in a logical management unit. The `odo` tool helps you manage that group of components and link them together as an application.

    A selection of runtimes, frameworks, and other components are available on an OpenShift cluster for building your applications. This list is referred to as the **Developer Catalog**.

    List the supported component types in the catalog by running:

    ```
    odo catalog list components
    ```

    Administrators can configure the catalog to determine what components are available in the catalog, so the list will vary on different OpenShift clusters. For this scenario, the cluster's catalog list must include `java` and `nodejs`.

    Source code for the backend of our `wildwest` application is available in the command line environment. Change directories into the source directory, `backend`:

    ```
    cd ~/backend
    ```

    Take a look at the contents of the `backend` directory. It's a regular Java Spring Boot application using the Maven build system:

    ```
    ls
    ```

    Build the `backend` source files with Maven to create a jar file:

    ```
    mvn package
    ```

    Since this is the first time running this build, it may take 30-45 seconds to complete. Subsequent builds will run much more quickly.

    With the backend's `.jar` file built, we can use `odo` to deploy and run it atop the Java application server we saw earlier in the catalog. The command below creates a *component* configuration of *component-type* `java` named `backend`:

    ```
    odo create java:openjdk-11-ubi8 backend --s2i --binary target/wildwest-1.0.jar --app=app
    ```

    As the component configuration is created, `odo` will print the following:

    ```
    ✓  Validating component [6ms]
    Please use `odo push` command to create the component with source deployed
    ```

    The component is not yet deployed on OpenShift. With an `odo create` command, a configuration file called `config.yaml` has been created in the local directory of the `backend` component that contains information about the component for deployment.

    To see the configuration settings of the `backend` component in `config.yaml`, `odo` has a command to display this information:

    ```
    odo config view
    ```

    Since `backend` is a binary component, as specified in the `odo create` command above, changes to the component's source code should be followed by pushing the jar file to a running container. After `mvn` compiled a new `wildwest-1.0.jar` file, the program would be deployed to OpenShift with the `odo push` command. We can execute such a push right now:

    ```
    odo push
    ```

    As the push is progressing, `odo` will print output similar to the following:

    ```
    Validation
     ✓  Checking component [13ms]

    Configuration changes
     ✓  Initializing component
     ✓  Creating component [107ms]

    Pushing to component backend of type binary
     ✓  Checking files for pushing [2ms]
     ✓  Waiting for component to start [59s]
     ✓  Syncing files to the component [14s]
     ✓  Building component [2s]
    ```

    Using `odo push`, OpenShift has created a container to host the `backend` component, deployed the container into a pod running on the OpenShift cluster, and started up the `backend` component.

    You can view the `backend` component being started up in the web console by switching over from the **Administrator** perspective to the **Developer** perspective. To do this, select the **Developer** option from the dropdown menu as shown below:

    ![Developer Perspective](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/developer-perspective.png)

    After selecting the **Developer** option, you will be on the **Topology** view that shows what components are deployed in your OpenShift project. The `backend` component is successfully deployed as a container that runs on a pod. When a dark blue circle appears around the backend component as shown below, the pod is ready and the `backend` component container will start running on it.

    ![Backend Pod](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/backend-pod.png)

    If you want to check on the status of an action in `odo`, you can use the `odo log` command. When `odo push` is finished, run `odo log` to follow the progress of the `backend` component deployment:

    ```
    odo log -f
    ```

    You should see output similar to the following to confirm the `backend` is running on a container in a pod in `myproject`:

    ```
    2019-05-13 12:32:15.986  INFO 729 --- [           main] c.o.wildwest.WildWestApplication         : Started WildWestApplication in 6.337 seconds (JVM running for 7.779)
    ```

    The `backend` jar file has now been pushed, and the `backend` component is running.

    When you've completed your review of the logs, send a break signal `CTRL-C` to return to the command prompt.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
- slug: 03-deploying-component-from-source-code
  id: 27d8xxrk1zte
  type: challenge
  title: Deploying component from source-code
  assignment: |
    With the `backend` component running and connected to persistent storage, we are ready to bring up the `frontend` component and connect it to the `backend`. Once again, source code for the component is already available in the command line environment.

    Change directories to the `frontend` directory:

    `cd ~/frontend`{{execute interrupt}}

    Listing the contents of this directory shows that `frontend` is a Node.js application.

    ```
    ls
    ```

    Since `frontend` is written in an interpreted language, there is no build step analogous to the Maven build we performed for the `backend` component. We can proceed directly to specifying the `nodejs` environment from the cluster's catalog.

    We give this Node.js component the name `frontend`:

    ```
    odo create frontend --app=app
    ```

    `odo` will create a `config.yaml` just like with the `backend` component, and you should see the following output:

    ```
    ✓  Validating component [6ms]
    Please use `odo push` command to create the component with source deployed
    ```

    With the component named and the config file created, we can push the Node.js source code from the current directory:

    ```
    odo push
    ```

    `odo push` should produce the following output:

    ```
    Validation
     ✓  Checking component [23ms]

    Configuration changes
     ✓  Initializing component
     ✓  Creating component [86ms]

    Pushing to component frontend of type local
     ✓  Checking files for pushing [710993ns]
     ✓  Waiting for component to start [52s]
     ✓  Syncing files to the component [26s]
     ✓  Building component [8s]
     ✓  Changes successfully pushed to component
    ```

    When we created the `backend` component, we viewed the logs via the terminal. You can also follow the status of your container creation in the web console. Click the **Console** tab and make sure you're in the project named `myproject`.

    Depending on how far along your `odo push` is, you may see the pod for the `frontend` component starting up with a light blue ring as shown below. This light blue ring means the pod is in a pending state and hasn't started yet:

    ![Frontend Pending](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/frontend-pending.png)

    Once the pod becomes available, you'll see the `frontend` component become available with a dark blue ring around it like the `backend` component has. This is shown below:

    ![Frontend Running](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/frontend-running.png)

    To see the logs of the `frontend` component, wait for the dark blue ring to appear around the component and then click on the `frontend` component circle. This should bring up the deployment config for `frontend` and present the option to **View Logs** under the **Pods** section. This is shown below:

    ![Frontend Logs](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/frontend-logs.png)

    Click on **View Logs** where you should eventually see the following logs confirming `frontend` is running:

    ```
    CONFIG ERROR: backend component config not found: COMPONENT_BACKEND_HOST, COMPONENT_BACKEND_PORT
    Listening on 0.0.0.0, port 8080
    Frontend available at URL_PREFIX: /
    { Error: 'Backend Component Not Configured' }
    ```

    Don't worry about the error message for now! You'll correct this in the next section.

    When you are done viewing the logs, click on the **Topology** tab on the left side of the web console to head back to `myproject`.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
- slug: 04-configuring-components
  id: fzr4hdledybp
  type: challenge
  title: Configuring components
  assignment: |
    With both components of our application running on the cluster, we need to confifigure the frontend to connect to the backend service.

    Configure the `frontend` component to connect to the `backend` by running:

    ```
    odo config set --env COMPONENT_BACKEND_PORT=8080,COMPONENT_BACKEND_HOST=backend-app
    ```

    This will inject configuration information into the `frontend` about the `backend`.  Run `odo push` to distribute the configuration changes and restart the `frontend` component.

    ```
    odo push
    ```

    If you head back quickly enough to the web console by clicking on the **Console** tab, you will see the `frontend` component have its dark blue ring turn light blue again. This means that the pod for `frontend` is being restarted so that it will now run with information about how to connect to the `backend` component. When the frontend component has a dark blue ring around it again, the linking is complete.

    Click on the `frontend` component circle and select **View Logs**. This time, instead of an error message, you will see the following confirming the `frontend` is properly communicating with the `backend` component:

    ```
    Listening on 0.0.0.0, port 8080
    Frontend available at URL_PREFIX: /
    Proxying "/ws/*" to 'backend-app:8080'
    ```

    Now that the `frontend` component has successfully connected to the `backend` component, let's add a `Route` to make the `frontend` publicly accessible.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
- slug: 05-exposing-components-to-public
  id: xkzdusandmgi
  type: challenge
  title: Exposing components to public
  assignment: |
    We have updated `frontend` to connect to our `backend`, allowing our application's components to communicate. Let's now create an external URL for our application so we can see it in action:

    ```
    odo url create frontend --port 8080
    ```

    Once the URL has been created in the `frontend` component's configuration, you will see the following output:

    ```
    ✓  URL created for component: frontend

    To create URL on the OpenShift cluster, please run `odo push`
    ```

    The change can now be pushed:

    ```
    odo push
    ```

    `odo` will print the URL generated for the application. It should be located in the middle of the output from `odo push` similar to the output below:

    ```
    Validation
     ✓  Checking component [34ms]

    Configuration changes
     ✓  Retrieving component data [27ms]
     ✓  Applying configuration [25ms]

    Applying URL changes
     ✓  URL frontend: http://frontend-app-myproject.2886795278-80-frugo03.environments.katacoda.com created

    Pushing to component frontend of type local
     ✓  Checking file changes for pushing [832029ns]
     ✓  No file changes detected, skipping build. Use the '-f' flag to force the build.
    ```

    Visit the URL in your browser to view the application once the `odo push` command finishes.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
- slug: 06-making-changes-to-source-code
  id: yxtyvlpdakbg
  type: challenge
  title: Making changes to source-code
  assignment: |
    We've deployed the first version of our application and tested it by visiting it with a browser. Let's look at how OpenShift and `odo` help make it easier to iterate on that app once it's running.

    First, make sure you are still in the `frontend` directory:

    ```
    cd ~/frontend
    ```

    Now, we will tell `odo` to `watch` for changes on the file system in the background. Note that the `&` is included to run `odo watch` in the background for this tutorial, but it is usually just run as `odo watch` and can be terminated using `ctrl+c`.

    ```
    odo watch &
    ```

    Let's change the displayed name for our wild west game. Currently, the title is "Wild West The OpenShift Way!" We will change this to "My App The OpenShift Way!"

    ![Application Title](https://katacoda.com/openshift/assets/introduction/developing-with-odo-42/app-name.png)

    Edit the file `index.html` with a search-and-replace one-liner performed with the Unix stream editor, `sed`:

    ```
    sed -i "s/Wild West/My App/" index.html
    ```

    There may be a slight delay before `odo` recognizes the change. Once the change is recognized, `odo` will push the changes to the `frontend` component and print its status to the terminal:

    ```
    File /root/frontend/index.html changed
    File  changed
    Pushing files...
    ✓  Waiting for component to start [10ms]
    ✓  Syncing files to the component [16s]
    ✓  Building component [6s]
    ```

    Refresh the application's page in the web browser. You will see the new name in the web interface for the application.

    __NOTE__: If you no longer have the application page opened in a browser, you can recall the url by executing:

    `odo url list`{{execute interrupt}}
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  difficulty: basic
  timelimit: 128
checksum: "302239931703818846"
