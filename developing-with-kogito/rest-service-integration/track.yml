slug: developing-with-kogito-rest-service-integration
id: cvqyit4cwwai
type: track
title: Orchestrating RESTful Services with Kogito
description: |
  In this scenario, you will learn 2 ways to call a RESTful microservice from [Kogito](https://kogito.kie.org) process/workflow.

  ## What is Kogito?

  ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

  ### BPMN2 and Services

  The BPMN2 specification defines the _Service Task_, an activity node used to invoke an automated application (or service) to execute a task. In [Kogito](https://kogito.kie.org), a _Service Task_ can be implemented using a CDI bean (Quarkus) or a Spring bean (Spring Boot).

  A CDI implementation of a _Service Task_ allows us to inject various capabilities and functionality into the implementation to allow us to, for example, define the integration logic to connect to external systems. In this scenario we will look at two options to integrate with RESTful microservice. First, we will use the MicroProfile Rest Client to call an external microservice. After that, we will replace this logic with an [Apache Camel](https://camel.apache.org/) route to call the same service. Note that the integration with Camel is extremely interesting, as Camel provides a vast array of connectors to connect to virtually any type of external system (e.g. SalesForce, Kafka, Twitter, SAP, etc.).

  ### Other possibilities

  Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-create-project
  id: 1yyrtuumlvxy
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |
      In this scenario, you will learn 2 ways to call a RESTful microservice from [Kogito](https://kogito.kie.org) process/workflow.

      ## What is Kogito?

      ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

      ### BPMN2 and Services

      The BPMN2 specification defines the _Service Task_, an activity node used to invoke an automated application (or service) to execute a task. In [Kogito](https://kogito.kie.org), a _Service Task_ can be implemented using a CDI bean (Quarkus) or a Spring bean (Spring Boot).

      A CDI implementation of a _Service Task_ allows us to inject various capabilities and functionality into the implementation to allow us to, for example, define the integration logic to connect to external systems. In this scenario we will look at two options to integrate with RESTful microservice. First, we will use the MicroProfile Rest Client to call an external microservice. After that, we will replace this logic with an [Apache Camel](https://camel.apache.org/) route to call the same service. Note that the integration with Camel is extremely interesting, as Camel provides a vast array of connectors to connect to virtually any type of external system (e.g. SalesForce, Kafka, Twitter, SAP, etc.).

      ### Other possibilities

      Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
  assignment: |
    In this step, we will create a Kogito application skeleton.


    # Create a basic project

    To create a new Quarkus project with the Kogito extension, click the following command.

    `mvn io.quarkus:quarkus-maven-plugin:1.7.0.Final:create \
        -DprojectGroupId=org.acme \
        -DprojectArtifactId=coffeeshop \
        -Dextensions="org.kie.kogito:kogito-quarkus,io.quarkus:quarkus-smallrye-openapi"`{{execute}}


    This uses the Quarkus Maven plugin and generates a basic Maven project for us in the `coffeeshop` subdirectory which contains:

    * The project's Maven structure.
    * An OpenAPI Swagger-UI at `http://localhost:8080/swagger-ui`.

    Once generated, look at the `coffeeshop/pom.xml`. We will find the import of the Quarkus BOM which enables us to omit the version of the Kogito and Quarkus dependencies. In addition, we can see the `quarkus-maven-plugin`, which is responsible for packaging of the application and which allows us to start the application in development mode.

    # Running the Application

    Click the following command to change directory to the `coffeeshop` directory:

    ```
    cd /root/projects/kogito/coffeeshop
    ```

    Click the following command to start the application in Quarkus development mode:

    ```
    mvn clean compile quarkus:dev
    ```

    We see the following output in the console:

    ```console
    2020-02-07 09:09:12,440 INFO  [io.quarkus] (main) getting-started 1.0-SNAPSHOT (running on Quarkus 1.4.1.Final) started in 5.850s. Listening on: http://0.0.0.0:8080
    2020-02-07 09:09:12,447 INFO  [io.quarkus] (main) Profile dev activated. Live Coding activated.
    2020-02-07 09:09:12,449 INFO  [io.quarkus] (main) Installed features: [cdi, kogito, resteasy, resteasy-jackson, smallrye-openapi, swagger-ui]
    ```

    Because this is the first Maven Kogito/Quarkus build in this environment, the system first needs to download a number of dependencies. This can take some time.

    After the dependencies have downloaded, and the application is compiled, note the amazingly fast startup time! Once started, we can open the application's Swagger UI in the browser [using this link](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).

    We see the following Swagger-UI page. Because we have not yet implemented our application, there are no operations defined yet in our API:

    ![New Kogito Quarkus Web Page](https://katacoda.com/openshift/assets/middleware/middleware-kogito/new-quarkus-empty-swagger-ui.png)

    It's working!

    We can now stop the application using `CTRL-C`.

    # The CoffeeService

    The goal of this scenario is for our process to call an external microservice using REST from a BPMN2 Service Task node. So we need to have a RESTful microservice that we can call.

    As part of this scenario we've provided a Quarkus-based microservice that serves as our Coffee Menu Service. The service provides a simple RESTful endpoint that returns a list of coffees on the menu, as well as the details of a single coffee item that can be selected by name.

    To run the service, we first need to compile and package it.

    Click the following command to change directory to the correct directory:

    `cd /root/projects/kogito/coffeeservice-quarkus`{{execute T2}}

    To package the project, click on the following command:

    `mvn clean package`{{execute T2}}

    This creates a new runnable Quarkus JAR file. Click on the following command to run the application:

    `java -jar target/coffeeservice-quarkus-1.0-SNAPSHOT-runner.jar`{{execute T2}}

    With the microservice running, we can access its [Swagger-UI here](https://[[CLIENT_SUBDOMAIN]]-8090-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).

    We can also retrieve the list of coffees using curl.

    `curl -X GET "http://localhost:8090/coffee" -H "accept: application/json" -d "{}"`{{execute T3}}

    You should see the following output:

    ```console
    [{"id":1,"name":"espresso-arabica","description":"arabica beans","price":2.0},{"id":2,"name":"espresso-robusta","description":"robusta beans","price":2.0},{"id":3,"name":"latte-arabica","description":"arabica beans, full fat bio milk","price":3.0}]
    ```

    # Congratulations!

    You've seen how to create the skeleton of basic Kogito app, package it and start it up very quickly in `quarkus:dev` mode. We'll leave the app running and rely on hot reload for the next steps.

    In the next step we'll create a BPMN2 process definition to demonstrate Kogito's code generation, hot-reload and workflow capabilities.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: 02-implement-process
  id: 6mzquvcsqlpo
  type: challenge
  title: Step 2
  assignment: |
    In the previous step we've created a skeleton Kogito application with Quarkus. In this step we'll create the initial part of our _coffeeshop_ process. This will be a very simple process that only retrieves the available types of coffees from the _CoffeeMenuService_. This scenario is only intended to demonstrate the capabilities of Kogito. The rest of our _coffeeshop process_ would for example include a _UserTask_ to select the type of coffee, selection of a payment method, integration with an external payment provider, and an event to the barista to make the requested coffee.

    ## Create a process definition

    Letâ€™s modify the application and add our simple _coffeeshop process_.

    We create a simple process that will look like this:

    ![Process](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-rest-coffeeshop-process.png)

    Click the following path to open a new _coffeeshop process_ BPMN2 file: `coffeeshop/src/main/resources/coffeeshop-process.bpmn`

    BPMN2 allows us to define a graphical representation of a process (or workflow), and as such, we need a BPMN2 editor to implement our process. Kogito provides an online BPMN2 editor that we can use to build our process.

    Click on the "Kogito BPMN Tooling" tab next to the "OpenShift Console" tab to open the Kogito BPMN Tooling, or navigate to: https://bpmn.new

    Implement the process as follows (note that we can also bypass this step and simply copy the pre-made BPMN2 file provided below):

    * Click the pencil icon on the right-hand-side of the screen to open the property panel. Set the following name, id and package:
    ** Name: `coffeeshop`
    ** ID: `coffeeshop`
    ** Package: `org.acme`
    * Expand the _Process Data_ section and add the following _Process Variable_:
    ** Name: `coffees`
    ** Data Type: `java.util.Collection`
    * Add the tag `output` to this variable. This controls, among other things, the generation of our RESTful API. I.e., a variable tagged with `output` will not be part of the input model, and thus does not need to be passed when starting a process. It is however part of the output model, and hence will be returned to the client as a response of the RESTful call.
    * Create a StartEvent node.
    * Create a Service Task node.
    * Connect the Service Task node to the StartEvent.
    * Give the Service Task node the name: "Get Coffee Menu"
    * With the Service Task selected, open the property panel on the right-hand-side of the screen by clicking the pencil icon.
    * Expand the _Implementation/Execution_ section. Set the following values:
    ** Implementation: `Java`
    ** Interface: `org.acme.service.CoffeeService`
    ** Operation: `getCoffees`
    ** Assignments: See image below

    ![GetCoffees Input Output](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-coffee-process-getcoffee-data-assignment.png)

    * Create an EndEvent node and connect it to the Service Task node.

    After we've defined our process, click on the **File Actions -> Copy source** button to copy the BPMN2 XML definition to our clipboard.

    Copy the content of our clipboard to the `coffeeshop/src/main/resources/coffeeshop-process.bpmn` file we've created and opened earlier using `Ctrl+v ` or `Command-v` (depending on your type of computer).

    Alternatively, we copy the following BPMN2 definition to the BPMN file:

    <pre class="file" data-filename="./coffeeshop/src/main/resources/coffeeshop-process.bpmn" data-target="replace">
    &lt;bpmn2:definitions xmlns:bpmn2=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot; xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:bpsim=&quot;http://www.bpsim.org/schemas/1.0&quot; xmlns:dc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot; xmlns:di=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; xmlns:drools=&quot;http://www.jboss.org/drools&quot; id=&quot;_F5Ou4HNMEDig17XG0NHLjQ&quot; exporter=&quot;jBPM Process Modeler&quot; exporterVersion=&quot;2.0&quot; targetNamespace=&quot;http://www.omg.org/bpmn20&quot;&gt;
      &lt;bpmn2:itemDefinition id=&quot;_coffeesItem&quot; structureRef=&quot;java.util.Collection&quot;/&gt;
      &lt;bpmn2:itemDefinition id=&quot;__3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_coffeesOutputXItem&quot; structureRef=&quot;java.util.Collection&quot;/&gt;
      &lt;bpmn2:interface id=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_ServiceInterface&quot; name=&quot;org.acme.service.CoffeeService&quot; implementationRef=&quot;org.acme.service.CoffeeService&quot;&gt;
        &lt;bpmn2:operation id=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_ServiceOperation&quot; name=&quot;getCoffees&quot; implementationRef=&quot;getCoffees&quot;/&gt;
      &lt;/bpmn2:interface&gt;
      &lt;bpmn2:process id=&quot;coffeeshop&quot; drools:packageName=&quot;org.acme&quot; drools:version=&quot;1.0&quot; drools:adHoc=&quot;false&quot; name=&quot;coffeeshop&quot; isExecutable=&quot;true&quot; processType=&quot;Public&quot;&gt;
        &lt;bpmn2:property id=&quot;coffees&quot; itemSubjectRef=&quot;_coffeesItem&quot; name=&quot;coffees&quot;&gt;
          &lt;bpmn2:extensionElements&gt;
            &lt;drools:metaData name=&quot;customTags&quot;&gt;
              &lt;drools:metaValue&gt;&lt;![CDATA[output]]&gt;&lt;/drools:metaValue&gt;
            &lt;/drools:metaData&gt;
          &lt;/bpmn2:extensionElements&gt;
        &lt;/bpmn2:property&gt;
        &lt;bpmn2:sequenceFlow id=&quot;_323FD4C9-FC3D-404F-9156-E3F83B45A799&quot; sourceRef=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot; targetRef=&quot;_D74E4311-5CAB-4CBE-9B83-C12961961633&quot;&gt;
          &lt;bpmn2:extensionElements&gt;
            &lt;drools:metaData name=&quot;isAutoConnection.source&quot;&gt;
              &lt;drools:metaValue&gt;&lt;![CDATA[true]]&gt;&lt;/drools:metaValue&gt;
            &lt;/drools:metaData&gt;
            &lt;drools:metaData name=&quot;isAutoConnection.target&quot;&gt;
              &lt;drools:metaValue&gt;&lt;![CDATA[true]]&gt;&lt;/drools:metaValue&gt;
            &lt;/drools:metaData&gt;
          &lt;/bpmn2:extensionElements&gt;
        &lt;/bpmn2:sequenceFlow&gt;
        &lt;bpmn2:sequenceFlow id=&quot;_00AB4A77-D70F-4086-8BA6-57DD017A5323&quot; sourceRef=&quot;_75AC8C0C-CFBD-4ADF-A3B4-83AB90581A73&quot; targetRef=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot;&gt;
          &lt;bpmn2:extensionElements&gt;
            &lt;drools:metaData name=&quot;isAutoConnection.source&quot;&gt;
              &lt;drools:metaValue&gt;&lt;![CDATA[true]]&gt;&lt;/drools:metaValue&gt;
            &lt;/drools:metaData&gt;
            &lt;drools:metaData name=&quot;isAutoConnection.target&quot;&gt;
              &lt;drools:metaValue&gt;&lt;![CDATA[true]]&gt;&lt;/drools:metaValue&gt;
            &lt;/drools:metaData&gt;
          &lt;/bpmn2:extensionElements&gt;
        &lt;/bpmn2:sequenceFlow&gt;
        &lt;bpmn2:endEvent id=&quot;_D74E4311-5CAB-4CBE-9B83-C12961961633&quot;&gt;
          &lt;bpmn2:incoming&gt;_323FD4C9-FC3D-404F-9156-E3F83B45A799&lt;/bpmn2:incoming&gt;
        &lt;/bpmn2:endEvent&gt;
        &lt;bpmn2:serviceTask id=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot; drools:serviceimplementation=&quot;Java&quot; drools:serviceinterface=&quot;org.acme.service.CoffeeService&quot; drools:serviceoperation=&quot;getCoffees&quot; name=&quot;Get Coffee Menu&quot; implementation=&quot;Java&quot; operationRef=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_ServiceOperation&quot;&gt;
          &lt;bpmn2:extensionElements&gt;
            &lt;drools:metaData name=&quot;elementname&quot;&gt;
              &lt;drools:metaValue&gt;&lt;![CDATA[Get Coffee Menu]]&gt;&lt;/drools:metaValue&gt;
            &lt;/drools:metaData&gt;
          &lt;/bpmn2:extensionElements&gt;
          &lt;bpmn2:incoming&gt;_00AB4A77-D70F-4086-8BA6-57DD017A5323&lt;/bpmn2:incoming&gt;
          &lt;bpmn2:outgoing&gt;_323FD4C9-FC3D-404F-9156-E3F83B45A799&lt;/bpmn2:outgoing&gt;
          &lt;bpmn2:ioSpecification&gt;
            &lt;bpmn2:dataOutput id=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_coffeesOutputX&quot; drools:dtype=&quot;java.util.Collection&quot; itemSubjectRef=&quot;__3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_coffeesOutputXItem&quot; name=&quot;coffees&quot;/&gt;
            &lt;bpmn2:outputSet&gt;
              &lt;bpmn2:dataOutputRefs&gt;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_coffeesOutputX&lt;/bpmn2:dataOutputRefs&gt;
            &lt;/bpmn2:outputSet&gt;
          &lt;/bpmn2:ioSpecification&gt;
          &lt;bpmn2:dataOutputAssociation&gt;
            &lt;bpmn2:sourceRef&gt;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_coffeesOutputX&lt;/bpmn2:sourceRef&gt;
            &lt;bpmn2:targetRef&gt;coffees&lt;/bpmn2:targetRef&gt;
          &lt;/bpmn2:dataOutputAssociation&gt;
        &lt;/bpmn2:serviceTask&gt;
        &lt;bpmn2:startEvent id=&quot;_75AC8C0C-CFBD-4ADF-A3B4-83AB90581A73&quot;&gt;
          &lt;bpmn2:outgoing&gt;_00AB4A77-D70F-4086-8BA6-57DD017A5323&lt;/bpmn2:outgoing&gt;
        &lt;/bpmn2:startEvent&gt;
      &lt;/bpmn2:process&gt;
      &lt;bpmndi:BPMNDiagram&gt;
        &lt;bpmndi:BPMNPlane bpmnElement=&quot;coffeeshop&quot;&gt;
          &lt;bpmndi:BPMNShape id=&quot;shape__75AC8C0C-CFBD-4ADF-A3B4-83AB90581A73&quot; bpmnElement=&quot;_75AC8C0C-CFBD-4ADF-A3B4-83AB90581A73&quot;&gt;
            &lt;dc:Bounds height=&quot;56&quot; width=&quot;56&quot; x=&quot;176&quot; y=&quot;198&quot;/&gt;
          &lt;/bpmndi:BPMNShape&gt;
          &lt;bpmndi:BPMNShape id=&quot;shape__3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot; bpmnElement=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot;&gt;
            &lt;dc:Bounds height=&quot;90&quot; width=&quot;195&quot; x=&quot;326&quot; y=&quot;181&quot;/&gt;
          &lt;/bpmndi:BPMNShape&gt;
          &lt;bpmndi:BPMNShape id=&quot;shape__D74E4311-5CAB-4CBE-9B83-C12961961633&quot; bpmnElement=&quot;_D74E4311-5CAB-4CBE-9B83-C12961961633&quot;&gt;
            &lt;dc:Bounds height=&quot;56&quot; width=&quot;56&quot; x=&quot;641&quot; y=&quot;198&quot;/&gt;
          &lt;/bpmndi:BPMNShape&gt;
          &lt;bpmndi:BPMNEdge id=&quot;edge_shape__75AC8C0C-CFBD-4ADF-A3B4-83AB90581A73_to_shape__3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot; bpmnElement=&quot;_00AB4A77-D70F-4086-8BA6-57DD017A5323&quot;&gt;
            &lt;di:waypoint x=&quot;232&quot; y=&quot;226&quot;/&gt;
            &lt;di:waypoint x=&quot;326&quot; y=&quot;226&quot;/&gt;
          &lt;/bpmndi:BPMNEdge&gt;
          &lt;bpmndi:BPMNEdge id=&quot;edge_shape__3CDC6E61-DCC5-4831-8BBB-417CFF517CB0_to_shape__D74E4311-5CAB-4CBE-9B83-C12961961633&quot; bpmnElement=&quot;_323FD4C9-FC3D-404F-9156-E3F83B45A799&quot;&gt;
            &lt;di:waypoint x=&quot;521&quot; y=&quot;226&quot;/&gt;
            &lt;di:waypoint x=&quot;732.5&quot; y=&quot;198&quot;/&gt;
          &lt;/bpmndi:BPMNEdge&gt;
        &lt;/bpmndi:BPMNPlane&gt;
      &lt;/bpmndi:BPMNDiagram&gt;
      &lt;bpmn2:relationship type=&quot;BPSimData&quot;&gt;
        &lt;bpmn2:extensionElements&gt;
          &lt;bpsim:BPSimData&gt;
            &lt;bpsim:Scenario id=&quot;default&quot; name=&quot;Simulationscenario&quot;&gt;
              &lt;bpsim:ScenarioParameters/&gt;
              &lt;bpsim:ElementParameters elementRef=&quot;_75AC8C0C-CFBD-4ADF-A3B4-83AB90581A73&quot;&gt;
                &lt;bpsim:TimeParameters&gt;
                  &lt;bpsim:ProcessingTime&gt;
                    &lt;bpsim:NormalDistribution mean=&quot;0&quot; standardDeviation=&quot;0&quot;/&gt;
                  &lt;/bpsim:ProcessingTime&gt;
                &lt;/bpsim:TimeParameters&gt;
              &lt;/bpsim:ElementParameters&gt;
              &lt;bpsim:ElementParameters elementRef=&quot;_3CDC6E61-DCC5-4831-8BBB-417CFF517CB0&quot;&gt;
                &lt;bpsim:TimeParameters&gt;
                  &lt;bpsim:ProcessingTime&gt;
                    &lt;bpsim:NormalDistribution mean=&quot;0&quot; standardDeviation=&quot;0&quot;/&gt;
                  &lt;/bpsim:ProcessingTime&gt;
                &lt;/bpsim:TimeParameters&gt;
                &lt;bpsim:ResourceParameters&gt;
                  &lt;bpsim:Availability&gt;
                    &lt;bpsim:FloatingParameter value=&quot;0&quot;/&gt;
                  &lt;/bpsim:Availability&gt;
                  &lt;bpsim:Quantity&gt;
                    &lt;bpsim:FloatingParameter value=&quot;0&quot;/&gt;
                  &lt;/bpsim:Quantity&gt;
                &lt;/bpsim:ResourceParameters&gt;
                &lt;bpsim:CostParameters&gt;
                  &lt;bpsim:UnitCost&gt;
                    &lt;bpsim:FloatingParameter value=&quot;0&quot;/&gt;
                  &lt;/bpsim:UnitCost&gt;
                &lt;/bpsim:CostParameters&gt;
              &lt;/bpsim:ElementParameters&gt;
            &lt;/bpsim:Scenario&gt;
          &lt;/bpsim:BPSimData&gt;
        &lt;/bpmn2:extensionElements&gt;
        &lt;bpmn2:source&gt;_F5Ou4HNMEDig17XG0NHLjQ&lt;/bpmn2:source&gt;
        &lt;bpmn2:target&gt;_F5Ou4HNMEDig17XG0NHLjQ&lt;/bpmn2:target&gt;
      &lt;/bpmn2:relationship&gt;
    &lt;/bpmn2:definitions&gt;
    </pre>

    Note that we've not yet implemented the required CDI beans, therefore we cannot test our process yet. We will implement this CDI bean in the following step.

    ## Congratulations!

    We've created the coffeeshop business process in our Kogito application using BPMN2. In the next step, we will implement the CDI bean that our Service Task is referencing.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: 03-implement-jaxrs-client
  id: cqdu57r7ior8
  type: challenge
  title: Step 3
  assignment: |
    In the previous step we added a process definition to our Kogito application that uses a Service Task node to call a CDI bean. In this step we will implement the CDI bean that calls our RESTful service.

    # REST Client Dependencies

    We first add the required dependencies to our pom.xml. Because we will use the `quarkus-rest-client`, we need to add its dependency to our POM.

    Click the following command to add the dependencies to our project.

    `mvn quarkus:add-extension -Dextensions=io.quarkus:quarkus-rest-client`{{execute T1}}

    Open the `pom.xml` file and observe that the required dependencies have been added: `coffeeshop/pom.xml`

    ### JAX-RS Client

    Our Service Task node in our process will call the method `getCoffees` of a CDI bean called `CoffeeService`. Let's first create the skeleton of that bean.

    Click the following command to create the package of the `CoffeeService` bean.

    `mkdir -p /root/projects/kogito/coffeeshop/src/main/java/org/acme/service`{{execute T3}}

    Click the following path to open a new `CoffeeService.java` file: `coffeeshop/src/main/java/org/acme/service/CoffeeService.java`

    Click _Copy to Editor_ to copy the source code into the new `CoffeeService.java`file.

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="replace">
    package org.acme.service;

    import java.util.Collection;

    import javax.enterprise.context.ApplicationScoped;
    import javax.inject.Inject;

    import org.acme.coffeeservice.client.CoffeeResource;
    import org.acme.model.Coffee;

    import org.eclipse.microprofile.rest.client.inject.RestClient;

    @ApplicationScoped
    public class CoffeeService {

    //Add RestClient annotations
    //Add RestClient attribute

        public Collection&lt;Coffee&gt; getCoffees() {
          return null;
        }

    }
    </pre>

    With the CDI bean skeleton implemented, we can focus on the domain model and the JAX-RS interface from which our rest client is generated.

    Our domain model is simply the `Coffee` class that's also used by the CoffeeService we started in the first step. Click the following command to create a new package for our domain class.

    `mkdir -p /root/projects/kogito/coffeeshop/src/main/java/org/acme/model`{{execute T3}}

    Click the following path to create the `Coffee.java` file: `coffeeshop/src/main/java/org/acme/model/Coffee.java`

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/model/Coffee.java" data-target="replace">
    package org.acme.model;

    public class Coffee {

        private long id;

        private String name;

        private String description;

        private double price;

        public Coffee() {
        }

        public Coffee(final long id, final String name, final String description, final double price) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.price = price;
        }

        public long getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public String getDescription() {
            return description;
        }

        public double getPrice() {
            return price;
        }

    }
    </pre>

    With our domain model implemented, we can now implement the JAX-RS interface definition. This is actually the same JAX-RS interface definition that is used in the _CoffeeService_. The only difference is that we annotate this interface with the `@RegisterRestClient(configKey = "coffeeresource")` annotation to register it as a Rest client.

    Click the following command to create the package force our Rest client.

    `mkdir -p /root/projects/kogito/coffeeshop/src/main/java/org/acme/coffeeservice/client`{{execute T3}}

    Click the following path to create the `CoffeeResource.java` interface: `coffeeshop/src/main/java/org/acme/coffeeservice/client/CoffeeResource.java`

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/coffeeservice/client/CoffeeResource.java" data-target="replace">
    package org.acme.coffeeservice.client;

    import java.util.Collection;

    import javax.ws.rs.GET;
    import javax.ws.rs.Path;
    import javax.ws.rs.PathParam;
    import javax.ws.rs.Produces;
    import javax.ws.rs.core.MediaType;

    import org.acme.model.Coffee;

    import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

    @RegisterRestClient(configKey = "coffeeresource")
    @Path("/coffee")
    public interface CoffeeResource {

        @GET
        @Produces(MediaType.APPLICATION_JSON)
        public Collection<Coffee> getCoffees();

        @GET
        @Path("/{name}")
        @Produces(MediaType.APPLICATION_JSON)
        public Coffee getCoffee(@PathParam("name") String name);

    }
    </pre>

    With our domain model and JAX-RS client interface defined, we can now add the logic to our CDI bean to use the JAX-RS client. Click the following path to re-open the `CoffeeService.java` class: `coffeeshop/src/main/java/org/acme/service/CoffeeService.java`

    First, we inject the `CoffeeResource` class into the service. Click _Copy to Editor_ to add the `CoffeeResource` attribute to our class (note that this attribute is _package-private_. This is recommended by Quarkus, as this enables Quarkus to do the injection without the need for reflection):

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add RestClient attribute">
        CoffeeResource coffeeResource;
    </pre>

    Next, we add the annotations to this attribute to inject the REST client. We need two annotations. First we need the `@Inject` annotation, but because we want to inject the generated REST client project (generated from the JAX-RS interface we created earlier), we also need to add the `@RestClient` annotation. Click `Copy to Editor` to add the annotations.

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add RestClient annotations">
        @Inject
        @RestClient
    </pre>

    Finally, we call our REST client to retrieve the list of coffees from our service. We add some logging to our application to show that our CDI is actually being called (just for demonstration purposes). Click `Copy to Editor` to add this logic to our service class.

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="return null;">
        System.out.println("Kogito calling our CoffeeService microservice!");
        return coffeeResource.getCoffees();
    </pre>

    # Configuring the REST client
    With our code completed, we now only need to add some configuration options to our `application.properties` file to instruct our REST client which endpoint it needs to call.

    Click the following path to open the `application.properties`: `coffeeshop/src/main/resources/application.properties`

    Click `Copy to Editor` to add the configuration of the REST client to the `application.properties` file.

    <pre class="file" data-filename="./coffeeshop/src/main/resources/application.properties" data-target="replace">
    #
    # Copyright 2020 Red Hat, Inc. and/or its affiliates.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    #https://quarkus.io/guides/openapi-swaggerui
    quarkus.smallrye-openapi.path=/docs/openapi.json
    quarkus.swagger-ui.always-include=true

    kogito.service.url=http://localhost:8080

    #CoffeeResource
    coffeeresource/mp-rest/url=http://localhost:8090
    coffeeresource/mp-rest/scope=javax.inject.Singleton
    </pre>

    Notice that we use the key `coffeeresource` to configure our client, and don't specify its full class name. This is possible because we defined this name as the `configKey` in `@RegisterRestClient` annotation on the JAX-RS interface.

    # Starting the Application

    With our code implemented, click the following command to start the application.

    `mvn clean compile quarkus:dev`{{execute T1}}

    This downloads the new dependencies and starts our application in Quarkus development mode.

    ## Testing the Application

    Click the following command to send a request to our application.

    `curl -X POST "http://localhost:8080/coffeeshop" -H "accept: application/json" -H "Content-Type: application/json" -d "{}"`{{execute T3}}

    We see the following output in the console:

    ```console
    [{"id":1,"name":"espresso-arabica","description":"arabica beans","price":2.0},{"id":2,"name":"espresso-robusta","description":"robusta beans","price":2.0},{"id":3,"name":"latte-arabica","description":"arabica beans, full fat bio milk","price":3.0}]
    ```

    ## Congratulations!

    We've implemented the MicroProfile JAXRS Rest Client to integrate our Kogito application with another microservice over REST. Well done! In the next step we will change the implementation to use Apache Camel.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
- slug: 04-implement-camel-client
  id: fdnm0gynrzy7
  type: challenge
  title: Step 4
  assignment: |
    In the previous step we've implemented a RESTful call from a Kogito process to a microservice using the MicroProfile JAX-RS Rest Client. In this step we will replace that implementation with an Apache Camel implementation. The advantage of Camel is that we can:

    * Add additional logic to our integration using additional Camel functionality, e.g. marshalling, transformation, routing, error handling, etc.
    * Use the vast array of Camel components to connect to virtually any other external system, e.g. Salesforce, Kafka, Twitter, Filesystems, etc.

    # Stop the Application
    Because we will add a number of Camel dependencies to our application, we must first stop our application.

    In the first terminal, stop the application using `CTRL-C`.

    # Camel Dependencies

    We add the required dependencies to our pom.xml. Because we will use the `netty-http` Camel component, we add its dependency to our POM. We will also use `camel-direct` to call the Camel Route from our CDI bean, and `jackson` to support marshalling and unmarshalling in our route.

    Click the following command to add the dependencies to our project:

    `mvn quarkus:add-extension -Dextensions=org.apache.camel.quarkus:camel-quarkus-netty-http,org.apache.camel.quarkus:camel-quarkus-jackson,org.apache.camel.quarkus:camel-quarkus-direct`{{execute T1}}

    Click the following path to open the `pom.xml` file and observe that the required dependencies have been added: `coffeeshop/pom.xml`

    ### Camel RouteBuilder

    We will now implement the Camel `RouteBuilder`. In the `RouteBuilder` we implement the Camel route that, in our case, will do a RESTful call to our CoffeeService microservice, and process the response.

    Click the following command to create a new package in which we create our RouteBuilder:

    `mkdir -p /root/projects/kogito/coffeeshop/src/main/java/org/acme/camel`{{execute T3}}

    Click on the following path to create the `CoffeeRouteBuilder.java` file: `coffeeshop/src/main/java/org/acme/camel/CoffeeRouteBuilder.java`

    Click _Copy to Editor_ to implement the `CoffeeRouteBuilder`.

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/camel/CoffeeRouteBuilder.java" data-target="replace">
    package org.acme.camel;

    import javax.enterprise.context.ApplicationScoped;
    import javax.ws.rs.core.MediaType;

    import org.acme.model.Coffee;

    import org.apache.camel.builder.RouteBuilder;
    import org.apache.camel.component.jackson.JacksonDataFormat;
    import org.apache.camel.component.jackson.ListJacksonDataFormat;

    @ApplicationScoped
    public class CoffeeRouteBuilder extends RouteBuilder {

        @Override
        public void configure() throws Exception {

            JacksonDataFormat format = new ListJacksonDataFormat(Coffee.class);

            from("direct://getCoffees").log("Get Coffee Route Triggered: ${body}")
            .setHeader("Accept").constant(MediaType.APPLICATION_JSON)
            .setHeader("CamelHttpMethod").constant("GET")
            .to("netty-http:http://localhost:8090/coffee")
            .unmarshal(format);

        }

    }
    </pre>

    The route is pretty simple. It accepts an exchange (message) from a "direct" endpoint (which allows us to call this endpoint from our CDI bean), it sets the required HTTP headers (`Accept`), it sets the HTTP method that we want to use, and uses the `netty-http` component to do a call to our CoffeeService. Finally, the response is unmarshalled into a `Collection` of `Coffee` instances using the `JacksonDataFormat` instance.

    With our route implemented, we can change our `CoffeeService` implementation to use our Camel route. To do this, click _Copy to Editor_ to replace our old implementation with a new following skeleton implementation.

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="replace">
    package org.acme.service;

    import java.util.Collection;

    import javax.annotation.PostConstruct;
    import javax.annotation.PreDestroy;
    import javax.enterprise.context.ApplicationScoped;
    import javax.inject.Inject;

    import org.acme.coffeeservice.client.CoffeeResource;
    import org.acme.model.Coffee;

    import org.apache.camel.CamelContext;
    import org.apache.camel.FluentProducerTemplate;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;

    @ApplicationScoped
    public class CoffeeService {

        private static final Logger LOGGER = LoggerFactory.getLogger(CoffeeService.class);

    //Add CamelContext

    //Add FluentProducerTemplate

    //Add PostConstruct

    //Add PreDestroy

        public Collection<Coffee> getCoffees() {
            LOGGER.debug("Retrieving coffees");
    //Add Method Implementation
        }

    }

    </pre>


    Click _Copy to Editor_ to copy the code snippet that injects the `CamelContext` into the service class:

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add CamelContext">
        @Inject
        CamelContext camelContext;
    </pre>

    Click _Copy to Editor_ to add an attribute to our class to hold the `FluentProducerTemplate`.

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add FluentProducerTemplate">
        private FluentProducerTemplate producer;
    </pre>

    Click _Copy to Editor_ to add the `@PostConstruct` method, in which the `FluentProducerTemplate` is initialized and its default endpoint is set:

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add PostConstruct">
        @PostConstruct
        void init() {
           producer = camelContext.createFluentProducerTemplate();
           producer.setDefaultEndpointUri("direct://getCoffees");
        }
    </pre>

    Click _Copy to Editor_ to add the `@PreDestroy` method which cleans-up the `ProducerTemplate` resources when the bean is destroyed:

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add PreDestroy">
        @PreDestroy
        void destroy() {
          producer.stop();
        }
    </pre>

    With all the plumbing in place, click _Copy to Editor_ to implement the method which calls the Camel route, which in its turn calls the microservice via REST:

    <pre class="file" data-filename="./coffeeshop/src/main/java/org/acme/service/CoffeeService.java" data-target="insert" data-marker="//Add Method Implementation">
        return producer.request(Collection.class);
    </pre>


    # Starting the Application

    Click on the following command to start the application again:

    `mvn clean compile quarkus:dev`{{execute T1}}

    This downloads the new dependencies and starts our application in Quarkus development mode.

    ## Testing the Application

    Click on the following command to send a request to test our application.

    `curl -X POST "http://localhost:8080/coffeeshop" -H "accept: application/json" -H "Content-Type: application/json" -d "{}"`{{execute T3}}

    We should see the following output in the console:

    ```console
    [{"id":1,"name":"espresso-arabica","description":"arabica beans","price":2.0},{"id":2,"name":"espresso-robusta","description":"robusta beans","price":2.0},{"id":3,"name":"latte-arabica","description":"arabica beans, full fat bio milk","price":3.0}]
    ```

    ## Congratulations!

    We've implemented the integration with our CoffeeService using Apache Camel's `netty-http` component. Well done!
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 300
checksum: "9065537209358275592"
