slug: developing-with-kogito-dmn
id: 6rrhwglr7g4j
type: track
title: DMN decision services with Kogito
description: |
  In this scenario, you will learn how to implement (business) decisions in [Kogito](https://kogito.kie.org) using _DMN_.

  ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

  ### Decision Model & Notation

  _Decision Model & Notation_ (DMN) is a standard by the Object Management Group (OMG) for decision modeling. DMN is to decisions what BPMN is for processes and workflows. DMN is targeted at both business users and developers and can be used to implement complex decision logic in a graphical notation.

  ### Other possibilities

  Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-create-project
  id: j0jcmy7ou6ig
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |
      In this scenario, you will learn how to implement (business) decisions in [Kogito](https://kogito.kie.org) using _DMN_.

      ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

      ### Decision Model & Notation

      _Decision Model & Notation_ (DMN) is a standard by the Object Management Group (OMG) for decision modeling. DMN is to decisions what BPMN is for processes and workflows. DMN is targeted at both business users and developers and can be used to implement complex decision logic in a graphical notation.

      ### Other possibilities

      Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
  assignment: |
    In this step, you will create the Kogito application skeleton.

    # The Project

    You start with a basic Maven-based Kogito application which has been generated from the Kogito Maven Archetype.

    # The Application You Will Build

    The application is a decision microservice which determines the airmiles a person will get based on his/her frequent flyer status and the price of the flight.

    You will implement these rules in a DMN (Decision Model & Notation) model, using DMN DRDs (Decision Requirement Diagram), decision tables and DMN FEEL (Friendly Enough Expression Language) expressions.

    Let's get started.

    # Create a basic project

    The easiest way to create a new Kogito project is to execute the Maven command below by clicking on it:

    `mvn archetype:generate \
      -DinteractiveMode=false \
      -DarchetypeGroupId=org.kie.kogito \
      -DarchetypeArtifactId=kogito-quarkus-archetype \
      -DarchetypeVersion=0.9.0 \
      -DgroupId=org.acme \
      -DartifactId=airmiles-service \
      -Dversion=1.0-SNAPSHOT`{{execute}}

    This will use the Kogito Maven Archetype and generate a basic Maven project for you in the `airmiles-service` subdirectory.

    The default Kogito application created from the archetype contains a sample process called `test-process.bpmn2`. We will remove this process definition, as it is not required for our application.

    ```
    rm -f /root/projects/kogito/airmiles-service/src/main/resources/test-process.bpmn2
    ```

    # Running the Application

    We will now run the Kogito application in development mode. This allows us to keep the application running while implementing our application logic. Kogito and Quarkus will _hot reload_ the application when it is accessed and changes have been detected.

    ```
    cd /root/projects/kogito/airmiles-service
    ```

    ```
    mvn clean compile quarkus:dev
    ```

    When the application has started, you can access the [Swagger UI](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).

    You should see the following page:

    ![New Kogito Quarkus Web Page](https://katacoda.com/openshift/assets/middleware/middleware-kogito/new-kogito-quarkus-empty-swagger-ui.png)

    It's working!


    # Congratulations!

    You've seen how to create the skeleton of basic Kogito app, and start the application in _Quarkus dev-mode_.

    In the next step we'll add the DMN model to our application.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 400
- slug: 02-implement-dmn-model
  id: if7senyf9o4t
  type: challenge
  title: Step 2
  assignment: "In the previous step you've created a skeleton Kogito application with Quarkus and started the application in _Quarkus dev-mode_. In this step we'll create the domain model of our application.\n\n## Decision Model & Notation\n\nDecision Model and Notation (DMN) is a standard by the Object Management Group (OMG) for describing and modeling decision logic. It provides a developer and business friendly way to design and model complex decisions using constructs like DRDs (Decision Requirement Diagrams), decision tables, boxed expressions and FEEL (Friendly Enough Expression Language) expressions.\n\nDMN is to decision logic what BPMN is to business process logic.\n\nThe Kogito DMN engine is the most powerful DMN decision engine on the market, and the only engine that can run cloud-natively in a container environment.\n\n## Creating the Model\n\nTo create our DMN model, we first need to create a new file: `airmiles-service/src/main/resources/airmiles.dmn`\n\nDMN uses a graphical modeling language/notation to define decisions. Therefore, Kogito provides a graphical DMN editor as part of its toolset. Apart from providing this editor as an extension to _Visual Studio Code_ and _Red Hat Code Ready Workspaces_, we also  provide this editor online.\n\nYou can open the editor by clicking on the \"Kogito DMN Tooling\" tab next to the \"OpenShift Console\" tab to open the Kogito DMN Tooling, or navigate to: https://dmn.new\n\nImplement the decision logic as shown in the following video.\n\nhttps://youtu.be/NAO0eV5c5tE\n\nAfter you've defined your DMN model, click on the **Copy to Clipboard** button to copy the DMN XML definition to your clipboard.\n\nCopy the content of your clipboard to the `airmiles-service/src/main/resources/airmiles.dmn` file you've created and opened earlier using `Ctrl+v ` or `Command-v` (depending on your type of computer).\n\nAlternatively, you can copy the following DMN definition to the DMN file:\n\n<pre class=\"file\" data-filename=\"./airmiles-service/src/main/resources/airmiles.dmn\" data-target=\"replace\">\n&lt;dmn:definitions xmlns:dmn=&quot;http://www.omg.org/spec/DMN/20180521/MODEL/&quot; xmlns=&quot;https://kiegroup.org/dmn/_5D27A744-6EE3-4BC6-B891-9A8669912C99&quot; xmlns:di=&quot;http://www.omg.org/spec/DMN/20180521/DI/&quot; xmlns:kie=&quot;http://www.drools.org/kie/dmn/1.2&quot; xmlns:dmndi=&quot;http://www.omg.org/spec/DMN/20180521/DMNDI/&quot; xmlns:dc=&quot;http://www.omg.org/spec/DMN/20180521/DC/&quot; xmlns:feel=&quot;http://www.omg.org/spec/DMN/20180521/FEEL/&quot; id=&quot;_114F5D03-A27F-437C-9078-743D9F77C0BE&quot; name=&quot;airmiles&quot; typeLanguage=&quot;http://www.omg.org/spec/DMN/20180521/FEEL/&quot; namespace=&quot;https://kiegroup.org/dmn/_5D27A744-6EE3-4BC6-B891-9A8669912C99&quot;&gt;\n  &lt;dmn:extensionElements/&gt;\n  &lt;dmn:itemDefinition id=&quot;_3ACF44E4-CC55-4609-A10F-D763EA91CFF9&quot; name=&quot;Status&quot; isCollection=&quot;false&quot;&gt;\n    &lt;dmn:typeRef&gt;string&lt;/dmn:typeRef&gt;\n    &lt;dmn:allowedValues kie:constraintType=&quot;enumeration&quot; id=&quot;_53BADE3B-9AAB-4B8B-BD94-89B92791C90E&quot;&gt;\n      &lt;dmn:text&gt;&quot;NONE&quot;, &quot;GOLD&quot;&lt;/dmn:text&gt;\n    &lt;/dmn:allowedValues&gt;\n  &lt;/dmn:itemDefinition&gt;\n  &lt;dmn:inputData id=&quot;_971CFFCA-D632-4D9E-907E-6039B4D637C4&quot; name=&quot;Status&quot;&gt;\n    &lt;dmn:extensionElements/&gt;\n    &lt;dmn:variable id=&quot;_E5F7E161-8BCB-4DF8-BD8D-31985886191A&quot; name=&quot;Status&quot; typeRef=&quot;Status&quot;/&gt;\n  &lt;/dmn:inputData&gt;\n  &lt;dmn:inputData id=&quot;_BA21F901-A388-4AA1-A2E3-9B851C3B4D51&quot; name=&quot;Price&quot;&gt;\n    &lt;dmn:extensionElements/&gt;\n    &lt;dmn:variable id=&quot;_291D47E7-08BC-46A8-9F76-90833F4663CA&quot; name=&quot;Price&quot; typeRef=&quot;number&quot;/&gt;\n  &lt;/dmn:inputData&gt;\n  &lt;dmn:decision id=&quot;_19410C4E-DBDB-40C0-9FD6-ED1BD2E45E7F&quot; name=&quot;Airmiles&quot;&gt;\n    &lt;dmn:extensionElements/&gt;\n    &lt;dmn:variable id=&quot;_C1CC187F-A475-42D2-B1EE-D1E932F271C6&quot; name=&quot;Airmiles&quot; typeRef=&quot;number&quot;/&gt;\n    &lt;dmn:informationRequirement id=&quot;_141FFE64-867C-4518-B1F6-445132968CB3&quot;&gt;\n      &lt;dmn:requiredInput href=&quot;#_971CFFCA-D632-4D9E-907E-6039B4D637C4&quot;/&gt;\n    &lt;/dmn:informationRequirement&gt;\n    &lt;dmn:informationRequirement id=&quot;_651F6C66-FADB-4649-B5B4-8203E6207335&quot;&gt;\n      &lt;dmn:requiredInput href=&quot;#_BA21F901-A388-4AA1-A2E3-9B851C3B4D51&quot;/&gt;\n    &lt;/dmn:informationRequirement&gt;\n    &lt;dmn:decisionTable id=&quot;_98D848C5-E990-4728-82FC-ADF33DD1919E&quot; hitPolicy=&quot;UNIQUE&quot; preferredOrientation=&quot;Rule-as-Row&quot;&gt;\n      &lt;dmn:input id=&quot;_55D26D4E-D92B-47BC-B496-3747D77EA0B6&quot;&gt;\n        &lt;dmn:inputExpression id=&quot;_9EC311C3-2140-43B3-A141-8A42DB00DB8D&quot; typeRef=&quot;number&quot;&gt;\n          &lt;dmn:text&gt;Price&lt;/dmn:text&gt;\n        &lt;/dmn:inputExpression&gt;\n      &lt;/dmn:input&gt;\n      &lt;dmn:input id=&quot;_84F3F5C1-79B5-409C-BCC0-97B396E28DD1&quot;&gt;\n        &lt;dmn:inputExpression id=&quot;_C62A3044-C6A6-48D8-872D-5B330E0C8047&quot; typeRef=&quot;string&quot;&gt;\n          &lt;dmn:text&gt;Status&lt;/dmn:text&gt;\n        &lt;/dmn:inputExpression&gt;\n      &lt;/dmn:input&gt;\n      &lt;dmn:output id=&quot;_544D2FEB-B841-4B61-B122-68A1C395832C&quot;/&gt;\n      &lt;dmn:annotation name=&quot;annotation-1&quot;/&gt;\n      &lt;dmn:rule id=&quot;_CDB2D0AC-ECDF-4C74-8A32-682069C91859&quot;&gt;\n        &lt;dmn:inputEntry id=&quot;_B165ED8B-A3A4-4B3B-889C-08593C8F9A87&quot;&gt;\n          &lt;dmn:text&gt;&amp;lt; 1000&lt;/dmn:text&gt;\n        &lt;/dmn:inputEntry&gt;\n        &lt;dmn:inputEntry id=&quot;_05887514-1C17-4C71-B8EC-AD08EC30C0CF&quot;&gt;\n          &lt;dmn:text&gt;&quot;NONE&quot;&lt;/dmn:text&gt;\n        &lt;/dmn:inputEntry&gt;\n        &lt;dmn:outputEntry id=&quot;_6619706E-377A-478F-A65B-47446C49EEEB&quot;&gt;\n          &lt;dmn:text&gt;Price&lt;/dmn:text&gt;\n        &lt;/dmn:outputEntry&gt;\n        &lt;dmn:annotationEntry&gt;\n          &lt;dmn:text/&gt;\n        &lt;/dmn:annotationEntry&gt;\n      &lt;/dmn:rule&gt;\n      &lt;dmn:rule id=&quot;_676E3049-FFB1-4632-B9D0-4306844F5253&quot;&gt;\n        &lt;dmn:inputEntry id=&quot;_F5048041-1FB8-4259-96BC-AF0AC391CB61&quot;&gt;\n          &lt;dmn:text&gt;&amp;lt; 1000&lt;/dmn:text&gt;\n        &lt;/dmn:inputEntry&gt;\n        &lt;dmn:inputEntry id=&quot;_DA250570-96EC-4054-81FE-D0E975A5F365&quot;&gt;\n          &lt;dmn:text&gt;&quot;GOLD&quot;&lt;/dmn:text&gt;\n        &lt;/dmn:inputEntry&gt;\n        &lt;dmn:outputEntry id=&quot;_20BB6BFE-4762-4280-9EF2-5FE9431645B2&quot;&gt;\n          &lt;dmn:text&gt;Price * 1.2&lt;/dmn:text&gt;\n        &lt;/dmn:outputEntry&gt;\n        &lt;dmn:annotationEntry&gt;\n          &lt;dmn:text/&gt;\n        &lt;/dmn:annotationEntry&gt;\n      &lt;/dmn:rule&gt;\n      &lt;dmn:rule id=&quot;_D5FF84FB-5746-4980-957E-F054C8957D2D&quot;&gt;\n        &lt;dmn:inputEntry id=&quot;_5F8CCCF6-3910-4E36-AC64-C84E53B49E01&quot;&gt;\n          &lt;dmn:text&gt;&amp;gt;= 1000&lt;/dmn:text&gt;\n        &lt;/dmn:inputEntry&gt;\n        &lt;dmn:inputEntry id=&quot;_2D8FC50E-625A-4BAC-B5C5-5DBE0BD14991&quot;&gt;\n          &lt;dmn:text&gt;&quot;GOLD&quot;&lt;/dmn:text&gt;\n        &lt;/dmn:inputEntry&gt;\n        &lt;dmn:outputEntry id=&quot;_5B55D92F-16C8-42B1-8302-26D9BC21EE3A&quot;&gt;\n          &lt;dmn:text&gt;Price * 1.5&lt;/dmn:text&gt;\n        &lt;/dmn:outputEntry&gt;\n        &lt;dmn:annotationEntry&gt;\n          &lt;dmn:text/&gt;\n        &lt;/dmn:annotationEntry&gt;\n      &lt;/dmn:rule&gt;\n    &lt;/dmn:decisionTable&gt;\n  &lt;/dmn:decision&gt;\n  &lt;dmndi:DMNDI&gt;\n    &lt;dmndi:DMNDiagram&gt;\n      &lt;di:extension&gt;\n        &lt;kie:ComponentsWidthsExtension&gt;\n          &lt;kie:ComponentWidths dmnElementRef=&quot;_98D848C5-E990-4728-82FC-ADF33DD1919E&quot;&gt;\n            &lt;kie:width&gt;50&lt;/kie:width&gt;\n            &lt;kie:width&gt;100&lt;/kie:width&gt;\n            &lt;kie:width&gt;100&lt;/kie:width&gt;\n            &lt;kie:width&gt;100&lt;/kie:width&gt;\n            &lt;kie:width&gt;100&lt;/kie:width&gt;\n          &lt;/kie:ComponentWidths&gt;\n        &lt;/kie:ComponentsWidthsExtension&gt;\n      &lt;/di:extension&gt;\n      &lt;dmndi:DMNShape id=&quot;dmnshape-_971CFFCA-D632-4D9E-907E-6039B4D637C4&quot; dmnElementRef=&quot;_971CFFCA-D632-4D9E-907E-6039B4D637C4&quot; isCollapsed=&quot;false&quot;&gt;\n        &lt;dmndi:DMNStyle&gt;\n          &lt;dmndi:FillColor red=&quot;255&quot; green=&quot;255&quot; blue=&quot;255&quot;/&gt;\n          &lt;dmndi:StrokeColor red=&quot;0&quot; green=&quot;0&quot; blue=&quot;0&quot;/&gt;\n          &lt;dmndi:FontColor red=&quot;0&quot; green=&quot;0&quot; blue=&quot;0&quot;/&gt;\n        &lt;/dmndi:DMNStyle&gt;\n        &lt;dc:Bounds x=&quot;346&quot; y=&quot;322&quot; width=&quot;100&quot; height=&quot;50&quot;/&gt;\n        &lt;dmndi:DMNLabel/&gt;\n      &lt;/dmndi:DMNShape&gt;\n      &lt;dmndi:DMNShape id=&quot;dmnshape-_BA21F901-A388-4AA1-A2E3-9B851C3B4D51&quot; dmnElementRef=&quot;_BA21F901-A388-4AA1-A2E3-9B851C3B4D51&quot; isCollapsed=&quot;false&quot;&gt;\n        &lt;dmndi:DMNStyle&gt;\n          &lt;dmndi:FillColor red=&quot;255&quot; green=&quot;255&quot; blue=&quot;255&quot;/&gt;\n          &lt;dmndi:StrokeColor red=&quot;0&quot; green=&quot;0&quot; blue=&quot;0&quot;/&gt;\n          &lt;dmndi:FontColor red=&quot;0&quot; green=&quot;0&quot; blue=&quot;0&quot;/&gt;\n        &lt;/dmndi:DMNStyle&gt;\n        &lt;dc:Bounds x=&quot;554&quot; y=&quot;322&quot; width=&quot;100&quot; height=&quot;50&quot;/&gt;\n        &lt;dmndi:DMNLabel/&gt;\n      &lt;/dmndi:DMNShape&gt;\n      &lt;dmndi:DMNShape id=&quot;dmnshape-_19410C4E-DBDB-40C0-9FD6-ED1BD2E45E7F&quot; dmnElementRef=&quot;_19410C4E-DBDB-40C0-9FD6-ED1BD2E45E7F&quot; isCollapsed=&quot;false&quot;&gt;\n        &lt;dmndi:DMNStyle&gt;\n          &lt;dmndi:FillColor red=&quot;255&quot; green=&quot;255&quot; blue=&quot;255&quot;/&gt;\n          &lt;dmndi:StrokeColor red=&quot;0&quot; green=&quot;0&quot; blue=&quot;0&quot;/&gt;\n          &lt;dmndi:FontColor red=&quot;0&quot; green=&quot;0&quot; blue=&quot;0&quot;/&gt;\n        &lt;/dmndi:DMNStyle&gt;\n        &lt;dc:Bounds x=&quot;451&quot; y=&quot;188&quot; width=&quot;100&quot; height=&quot;50&quot;/&gt;\n        &lt;dmndi:DMNLabel/&gt;\n      &lt;/dmndi:DMNShape&gt;\n      &lt;dmndi:DMNEdge id=&quot;dmnedge-_141FFE64-867C-4518-B1F6-445132968CB3&quot; dmnElementRef=&quot;_141FFE64-867C-4518-B1F6-445132968CB3&quot;&gt;\n        &lt;di:waypoint x=&quot;396&quot; y=&quot;347&quot;/&gt;\n        &lt;di:waypoint x=&quot;501&quot; y=&quot;238&quot;/&gt;\n      &lt;/dmndi:DMNEdge&gt;\n      &lt;dmndi:DMNEdge id=&quot;dmnedge-_651F6C66-FADB-4649-B5B4-8203E6207335&quot; dmnElementRef=&quot;_651F6C66-FADB-4649-B5B4-8203E6207335&quot;&gt;\n        &lt;di:waypoint x=&quot;604&quot; y=&quot;347&quot;/&gt;\n        &lt;di:waypoint x=&quot;501&quot; y=&quot;213&quot;/&gt;\n      &lt;/dmndi:DMNEdge&gt;\n    &lt;/dmndi:DMNDiagram&gt;\n  &lt;/dmndi:DMNDI&gt;\n&lt;/dmn:definitions&gt;\n</pre>\n\nSince we still have our app running using `mvn quarkus:dev`, when you make these changes and reload the endpoint, Quarkus will notice all of these changes and live-reload them, including changes in your business assets (i.e. processes, decision, rules, etc.).\n\nCheck that it works as expected by opening the Swagger-UI endpoint by [clicking here](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui). The Swagger-UI will show the REST resources that have been generated from the project's _business assets_, in this case the `/airmiles` resource, which is backed by our DMN decision model.\n\n## Test the application.\n\nTo test the application, we can simply send a RESTful request to it using cURL. By clicking the following command, we send a request that determines the number of airmiles a traveller with a _GOLD_ status gets for a flight with a price of 600:\n\n`curl -X POST 'http://localhost:8080/airmiles' -H 'Accept: application/json' -H 'Content-Type: application/json' -d '{ \"Status\": \"GOLD\",\t\"Price\": 600}'`{{execute T2}}\n\nYou will get the following result:\n\n```console\n{\"Status\":\"GOLD\",\"Airmiles\":720.0,\"Price\":600}\n```\n\nWe can see that our DMN decision logic has determined that the number of airmiles is 720, which is 1.2 times the price of the flight.\n\nYou can now stop the application in the first terminal using `CTRL-C`.\n\n## Congratulations!\n\nYou've implemented your first DMN model using the Kogito Online DMN editor. Using the hot/live reload capabilities of Quarkus, we've seen how these changes are immediately reflected in our Swagger UI. Finally, you've fired a RESTful request to our DMN decision microservice and saw cloud-native decisioning with DMN in action.\n"
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 400
- slug: 03-deploy-on-openshift
  id: a4olewd2a5mt
  type: challenge
  title: Step 3
  assignment: "In the previous step you've created a DMN model that implements the decision logic of our airmiles service and tested it using a number of RESTful requests. In this step of the scenario, we will deploy our service to OpenShift and scale it up to be able to handle production load.\n\nBefore getting started with this step, make sure you've stopped the running application in terminal 1 using `CTRL-C`.\n\n## Login to OpenShift\n\n`oc login --server=https://[[HOST_SUBDOMAIN]]-6443-[[KATACODA_HOST]].environments.katacoda.com --insecure-skip-tls-verify=true`{{execute T1}}\n\nEnter your username and password:\n* Username: **developer**\n* Password: **developer**\n\n## Create a new project\n\n`oc new-project kogito-airmiles --display-name=\"Kogito Airmiles App\"`{{execute T1}}\n\n**3. Open the OpenShift Web Console**\n\nOpenShift ships with a web-based console that will allow users to perform various tasks via a browser. To get a feel for how the web console works, click on the \"OpenShift Console\" tab next to the \"Local Web Browser\" tab.\n\n![OpenShift Console Tab](https://katacoda.com/openshift/assets/middleware/quarkus/openshift-console-tab.png)\n\n> Note you will get a security certificate error due to the use of self-signed security certificates. You will need to accept the exception in your browser to continue to the OpenShift console.\n\nThe first screen you will see is the authentication screen. Enter your username and password (u: developer, p: developer) and then log in:\n\n![Web Console Login](https://katacoda.com/openshift/assets/middleware/middleware-kogito/login.png)\n\nAfter you have authenticated to the web console, you will be presented with a list of projects that your user has permission to work with.\n\n![Web Console Projects](https://katacoda.com/openshift/assets/middleware/middleware-kogito/projects.png)\n\nClick on your new project name to be taken to the project overview page which will list all of the routes, services, deployments, and pods that you have running as part of your project:\n\n![Web Console Overview](https://katacoda.com/openshift/assets/middleware/middleware-kogito/overview.png)\n\nThere's nothing there now, but that's about to change.\n\n## Deploy to OpenShift\n\nFirst, we need to compile and package our application. We will compile our application as a Kogito Quarkus native image using GraalVM. Note that the compilation might take a minute or two:\n\n`mvn clean package -Pnative`{{execute T1}}\n\nNext, create a new _binary_ build within OpenShift:\n\n`oc new-build quay.io/quarkus/ubi-quarkus-native-binary-s2i:19.3.1 --binary --name=airmiles-service -l app=airmiles-service`{{execute T1}}\n\n> This build uses the new [Red Hat Universal Base Image](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/building_running_and_managing_containers/using_red_hat_universal_base_images_standard_minimal_and_runtimes), providing foundational software needed to run most applications, while staying at a reasonable size.\n\nAnd then start and watch the build, which will take about a minute or two to complete:\n\n`oc start-build airmiles-service --from-file=target/airmiles-service-1.0-SNAPSHOT-runner --follow`{{execute T1}}\n\nOnce that's done, we'll deploy it as an OpenShift application:\n\n`oc new-app airmiles-service`{{execute T1}}\n\nand expose it to the world:\n\n`oc expose service airmiles-service`{{execute T1}}\n\nFinally, make sure it's actually done rolling out:\n\n`oc rollout status -w dc/airmiles-service`{{execute T1}}\n\nWait for that command to report `replication controller \"airmiles-service-1\" successfully rolled out` before continuing.\n\nAnd now we can access our application using `cURL` once again:\n\n`curl -X POST \"http://airmiles-service-kogito-airmiles.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/airmiles\" -H 'Accept: application/json' -H 'Content-Type: application/json' -d '{ \"Status\": \"GOLD\",\t\"Price\": 600}'`{{execute T1}}\n\n\nYou should again see the following decision result:\n\n```console\n{\"Status\":\"GOLD\",\"Airmiles\":720.0,\"Price\":600}\n```\n\nSo now our app is deployed to OpenShift. You can also see it in the [Overview in the OpenShift Console](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/k8s/ns/kogito-airmiles/deploymentconfigs/airmiles-service) with its single replica running in 1 pod (the blue circle).\n\n## Scale the application\n\nIn order to be able to handle production load and have high availability semantics, we need to scale the application and add a number of extra running pods.\n\nLet's make _sure_ our Kogito app doesn't go beyond a reasonable amount of memory for each instance by setting _resource constraints_ on it. We'll go with 50 MB of memory as an upper limit (which is pretty thin, compared to your average Java app!). This will let us scale up quite a bit. Click here to set this limit:\n\n`oc set resources dc/airmiles-service --limits=memory=50Mi`{{execute T1}}\n\n We can now easily scale the number of PODs via the OpenShift _oc_ client:\n\n`oc scale --replicas=10 dc/airmiles-service`{{execute T1}}\n\nBack in the [Overview in the OpenShift Console](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/k8s/ns/kogito-airmiles/deploymentconfigs/airmiles-service) you'll see the app scaling dynamically up to 10 pods.\n\nThis should only take a few seconds to complete the scaling. Now that we have 10 pods running, let's hit it with some load:\n\nNow, with our service being ready for a production environment, let's hit it with some load:\n\n`for i in {1..50} ; do curl -X POST \"http://airmiles-service-kogito-airmiles.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/airmiles\" -H \"accept: application/json\" -H \"Content-Type: application/json\"  -d '{ \"Status\": \"GOLD\",\t\"Price\": 600}'; sleep .05 ; done`{{execute T1}}\n\nYou can see the 10 instances of our Kogito app being load-balanced and process instances being created:\n\n```console\n{\"Status\":\"GOLD\",\"Airmiles\":720.0,\"Price\":600}\n{\"Status\":\"GOLD\",\"Airmiles\":720.0,\"Price\":600}\n{\"Status\":\"GOLD\",\"Airmiles\":720.0,\"Price\":600}\n{\"Status\":\"GOLD\",\"Airmiles\":720.0,\"Price\":600}\n...\n```\n\n\n## Congratulations!\n\nIn this scenario you got a glimpse of the power of Kogito apps on a Quarkus runtime on OpenShift. You've packaged your Kogito DMN Decision Service in a container image, deployed it on OpenShift, scaled the environment to 10 PODs and hit it with a number of requests. Well done!\n"
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 400
checksum: "11772142219623405367"
