slug: developing-with-kogito-rules
id: nbuayyq8xf6p
type: track
title: Kogito and Rules with RuleUnits
description: |
  In this scenario, you will learn how to implement (business) rules in [Kogito](https://kogito.kie.org) using _rule units_.

  ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

  ### Rule Units

  _Rule Units_ is an approach in which a rule base is partitioned in smaller _units_. These units are bound to (different) _data sources_ and their execution can be orchestrated. A _rule unit_ is an aggregate of data sources, global variables and rules.


  ### Other possibilities

  Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- rjarvine@redhat.com
- nvinto@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-create-project
  id: uhfndjs8bqdt
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |
      In this scenario, you will learn how to implement (business) rules in [Kogito](https://kogito.kie.org) using _rule units_.

      ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

      ### Rule Units

      _Rule Units_ is an approach in which a rule base is partitioned in smaller _units_. These units are bound to (different) _data sources_ and their execution can be orchestrated. A _rule unit_ is an aggregate of data sources, global variables and rules.


      ### Other possibilities

      Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
  assignment: |
    In this step, you will create the Kogito application skeleton.

    # The Project

    You start with a basic Maven-based Kogito application which has been generated from the Kogito Maven Archetype.

    # The Application You Will Build

    The application is a decision microservice which determines whether a person is an adult.

    You will implement these rules in DRL (Drools Rule Language), using the _rule unit_ API and the _OOPath_ rule syntax.

    Let's get started.

    # Create a basic project

    The easiest way to create a new Kogito project is to execute the Maven command below by clicking on it:

    `mvn archetype:generate \
      -DinteractiveMode=false \
      -DarchetypeGroupId=org.kie.kogito \
      -DarchetypeArtifactId=kogito-quarkus-archetype \
      -DarchetypeVersion=0.9.0 \
      -DgroupId=org.acme \
      -DartifactId=adult-service \
      -Dversion=1.0-SNAPSHOT`{{execute}}

    This will use the Kogito Maven Archetype and generate a basic Maven project for you in the `adult-service` subdirectory.

    The default Kogito application created from the archetype contains a sample process called `test-process.bpmn2`. We will remove this process definition, as it is not required for our application.

    ```
    rm -f /root/projects/kogito/adult-service/src/main/resources/test-process.bpmn2
    ```

    # Running the Application

    We will now run the Kogito application in development mode. This allows us to keep the application running while implementing our application logic. Kogito and Quarkus will _hot reload_ the application when it is accessed and changes have been detected.

    ```
    cd /root/projects/kogito/adult-service
    ```

    ```
    mvn clean compile quarkus:dev
    ```

    When the application has started, you can access the [Swagger UI](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).

    You should see the following page:

    ![New Kogito Quarkus Web Page](https://katacoda.com/openshift/assets/middleware/middleware-kogito/new-kogito-quarkus-empty-swagger-ui.png)

    It's working!

    You can now stop the application with `CTRL-C`.

    # Congratulations!

    You've seen how to create the skeleton of basic Kogito app, and start the application in _Quarkus dev-mode_.

    In the next step we'll add the domain model of our application.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 240
- slug: 02-implement-domain-model
  id: j54vxlbkdun7
  type: challenge
  title: Step 2
  assignment: |
    In the previous step you've created a skeleton Kogito application with Quarkus and started the application in _Quarkus dev-mode_. In this step we'll create the domain model of our application.

    ## Facts.

    A (business) rules and/or decision service operates on entities called _facts_. _Facts_ is data over which a rules engine reasons and to which it applies its constraints. In Kogito, facts are implemented as POJOs (Plain Old Java Objects).

    Our _adult service_ determines if a _person_ is an adult based on his age.

    From this description of our application, we can infer the _fact_:

    * Person: which has a name, an age, and a boolean that states whether he/she is an adult.


    ## Person

    We will first implement the `Person` class. To do this, we first need to create a new package in our project:

    `mkdir -p /root/projects/kogito/adult-service/src/main/java/org/acme/domain`{{execute T2}}

    We can now open a new `Person.java` file in this package by clicking: `adult-service/src/main/java/org/acme/domain/Person.java`

    Click on the _Copy to Editor_ link to copy the source code into the new `Person.java`file.

    <pre class="file" data-filename="./adult-service/src/main/java/org/acme/domain/Person.java" data-target="replace">
    package org.acme.domain;

    public class Person {

        private String name;

        private int age;

        private boolean adult;

        public Person() {
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        public boolean isAdult() {
            return adult;
        }

        public void setAdult(boolean adult) {
            this.adult = adult;
        }

    }
    </pre>


    ## Congratulations!

    You've implemented the domain model of your Kogito business rules project. In the next step, we will implement the _RuleUnit_ of our application.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 240
- slug: 03-implement-the-ruleunit
  id: j1ygwy5vitlo
  type: challenge
  title: Step 3
  assignment: |
    In the previous step you've implement the domain model of the application. Now it's time to implement the _RuleUnit_.

    ## Rule Unit

    _Rule Units_ are groups of data sources, global variables, and DRL rules that function together for a specific purpose. You can use rule units to partition a rule set into smaller units, bind different data sources to those units, and then execute the individual unit.

    ## PersonUnit.

    We will first implement the skeleton of our `PersonUnit` class. To do this, we first create a new `PersonUnit.java` file by clicking: `adult-service/src/main/java/org/acme/PersonUnit.java`

    Click on the _Copy to Editor_ link to copy the source code into the new `PersonUnit.java`file.

    <pre class="file" data-filename="./adult-service/src/main/java/org/acme/PersonUnit.java" data-target="replace">
    package org.acme;

    import org.acme.domain.Person;
    import org.kie.kogito.rules.DataSource;
    import org.kie.kogito.rules.DataStore;
    import org.kie.kogito.rules.RuleUnitData;

    public class PersonUnit implements RuleUnitData {

    //Add Person DataStore here

    //Add adultAge variable here

        public PersonUnit() {

        }

    //Add DataStore Getters and Setters here

    //Add adultAge Getters and Setters here

    }
    </pre>

    We now need to create out `DataSource` for our `Person` facts. A `DataSource` provides us with a typed API to add _facts_ to our unit. Kogito provides a number of different `DataSources` types, for example a `DataStore`, which allows users to insert, update and remove facts, and a `DataStream` that only allows to append facts to a stream.

    In this example we will be using the `DataStore` implementation for our `Person` facts. We therefore add a private `DataStore` variable to our rule unit. We use the `DataSource` factory class to create a new `DataStore` instance and assign it to the variable:

    <pre class="file" data-filename="./adult-service/src/main/java/org/acme/PersonUnit.java" data-target="insert" data-marker="//Add Person DataStore here">
      private DataStore&lt;Person&gt; persons = DataSource.createStore();
    </pre>

    We also create the _getters and setters_ for our store:

    <pre class="file" data-filename="./adult-service/src/main/java/org/acme/PersonUnit.java" data-target="insert" data-marker="//Add DataStore Getters and Setters here">
      public DataStore&lt;Person&gt; getPersons() {
          return persons;
      }

      public void setPersons(DataStore&lt;Person&gt; persons) {
          this.persons = persons;
      }
    </pre>

    That's it for now. We will implement some additional functionality to this unit later in this scenario.

    ## Congratulations!

    In this step you've implemented your first _Rule Unit_. Well done! In the next step we will implement the rules and queries of our rule unit.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 240
- slug: 04-ruleunit-rules
  id: kmmizeql1rs7
  type: challenge
  title: Step 4
  assignment: |
    In the previous step you've implement the rule unit of our application. We can now implement our rules and queries and start our application.

    ## Rules

    The rules of our rule unit will be implemented in DRL, the Drools Rule Language. DRL is a declarative language in which advanced rules can be defined and implemented, using constructs like rules, functions and queries.

    ## PersonUnit DRL

    We will first implement the skeleton of our `PersonUnit.drl` file in the `src/main/resources` directory of our project.

    First we create the proper package in our `src/main/resources` folder: `mkdir -p /root/projects/kogito/adult-service/src/main/resources/org/acme`{{execute T2}}

    Next, we create the DRL file by clicking: `adult-service/src/main/resources/org/acme/PersonUnit.drl`

    Click on the _Copy to Editor_ link to copy the source code into the new `PersonUnit.drl`file.

    <pre class="file" data-filename="./adult-service/src/main/resources/org/acme/PersonUnit.drl" data-target="replace">
    package org.acme;
    //Unit definition

    import org.acme.domain.Person;

    rule "Is Adult"
    when
    //Person OOPath
    then
    //Set adult
    end


    query "adult"
    //Adult query
    end
    </pre>

    We first need to define that this `PersonUnit.drl` is connected to our `PersonUnit`. We do this through `unit` definition under the `package` definition at the top of the DRL file:

    <pre class="file" data-filename="./adult-service/src/main/resources/org/acme/PersonUnit.drl" data-target="insert" data-marker="//Unit definition">
    unit PersonUnit;
    </pre>

    Next, we implement the constraint, or left-hand-side of our rule. We will do this in the _OOPath_ syntax. _OOPath_ allows us to write constraints in an XPath-like syntax, allowing users to more easily navigate object hierarchies when writing rules. Also, it allows us to easily define constraints using the rule unit `DataSource` paradigm.

    The following constraint matches `Person` facts from the `persons` datastore of our unit, who's age is equal to, or greater than 18:

    <pre class="file" data-filename="./adult-service/src/main/resources/org/acme/PersonUnit.drl" data-target="insert" data-marker="//Person OOPath">
      $p: /persons[age &gt;= 18];
    </pre>

    We can now implement the consequence of our rule, or the right-hand-side (RHS). This the action that will be executed when the rule fires. In our case we want to set the person's `adult` field to true when the rule fires:

    <pre class="file" data-filename="./adult-service/src/main/resources/org/acme/PersonUnit.drl" data-target="insert" data-marker="//Set adult">
      $p.setAdult(true);
    </pre>


    The next thing we need to do for our Kogito application is a query. The query in a unit's DRL, in combination with the rule unit definition, is used by the Kogito code generator to automatically generate the RESTful endpoint for our application.

    In this query, we simply want to return all the facts from our `persons` datastore:

    <pre class="file" data-filename="./adult-service/src/main/resources/org/acme/PersonUnit.drl" data-target="insert" data-marker="//Adult query">
      $p: /persons;
    </pre>

    This completes the initial implementation of our DRL.

    ## Running the application

    With our domain model, rule unit and rules implemented, we can now start our application.

    `mvn clean compile quarkus:dev`{{execute T1}}

    We can inspect the generated RESTful endpoint in the Swagger-UI [Swagger UI](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui) of the application.

    We can now send a request to our generated RESTful endpoint using cURL:

    `curl -X POST "http://localhost:8080/adult" -H "accept: application/json" -H "Content-Type: application/json" -d "{\"persons\":[{\"age\":18,\"name\":\"Jason\"}]}"`{{execute T2}}

    You should see the following result, showing that Jason is an adult:

    ```console
    [{"name":"Jason","age":18,"adult":true}]
    ```

    Stop the application in the first terminal using `CTRL-C`.

    ## Congratulations!

    In this step you've implemented your first Kogito rules and queries. You've seen how Kogito automatically generates the RESTful microservice for you using your business assets, like your rule unit and rules definitions. Finally, we've started our application in Quarkus dev-mode, and fired a request.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 240
- slug: 05-ruleunit-variables
  id: cyg0tub29xij
  type: challenge
  title: Step 5
  assignment: |
    In the previous step you've implemented the rules of our application. We will now add a new variable to our unit and rules to control the age when someone is considered and adult.

    ## RuleUnit variables

    Apart from using `DataSources` in our rule units to insert, update and delete facts, we can also define variables in our unit that can be used in our rules. In this use-case we will add an `adultAge` variable to our unit, which allows us to send the age at which a person is considered an adult in our request, and using that age in our rules.

    ## PersonUnit DRL

    First, we add a new `adultAge` variable to our `PersonUnit` class. First we open the file: `adult-service/src/main/java/org/acme/PersonUnit.java`

    And next, we add the `adultAge` variable:

    <pre class="file" data-filename="./service-task/src/main/java/org/acme/PersonUnit.java" data-target="insert" data-marker="//Add adultAge variable here">
      private int adultAge;
    </pre>

    We also add the _getters and setters_:

    <pre class="file" data-filename="./adult-service/src/main/java/org/acme/PersonUnit.java" data-target="insert" data-marker="//Add adultAge Getters and Setters here">
      public int getAdultAge() {
          return adultAge;
      }

      public void setAdultAge(int adultAge) {
          this.adultAge = adultAge;
      }
    </pre>

    With our variable implemented, we can now use this variable in our rules: `adult-service/src/main/resources/org/acme/PersonUnit.drl`

    <pre class="file" data-filename="./adult-service/src/main/resources/org/acme/PersonUnit.drl" data-target="insert" data-marker="$p: /persons[age >= 18];">
      $p: /persons[age &gt;= adultAge];
    </pre>

    We've now added the functionality we want, so we can start our application again:

    `mvn clean compile quarkus:dev`{{execute T1}}

    We can now hit the application with a request that contains our new `adultAge` variable:

    `curl -X POST "http://localhost:8080/adult" -H "accept: application/json" -H "Content-Type: application/json" -d "{\"adultAge\": 21, \"persons\":[{\"age\":18,\"name\":\"Jason\"}]}"`{{execute T2}}

    This will give you the following result:

    ```console
    [{"name":"Jason","age":18,"adult":false}]
    ```

    Notice that, because we have defined the `adultAge` to be 21, Jason is no longer considered an adult.

    ## OpenAPI Specification

    A Kogito Quarkus application running in Quarkus dev-mode automatically exposes an OpenAPI specification of its RESTful resources through a Swagger-UI. You can open this Swagger [using this link](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).

    Open the **POST /adult** RESTful endpoint. Note that a fully typed API is generated for you, based on your business assets like your rule units and rules.

    ![API](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-adult-post-api.png)

    ## Congratulations!

    You have added a variable to your rule unit and used it in your rules. You've also experienced the power of live/hot reload of Kogito, providing extremely fast roundtrip times.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 240
checksum: "17602673423729102891"
