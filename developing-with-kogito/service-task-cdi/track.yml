slug: developing-with-kogito-service-task-cdi
id: ygquhbgbrdou
type: track
title: Kogito and CDI
description: |
  In this scenario, you will learn how to implement process and workflow logic with CDI beans in [Kogito](https://kogito.kie.org).

  ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

  ### BPMN2 Service Task and CDI

  The BPMN2 specification defines the _Service Task_, an activity node used to invoke an automated application (or service) to execute a task. In [Kogito](https://kogito.kie.org), a _Service Task_ can be implemented using a CDI bean (Quarkus) or a Spring bean (Spring Boot). In this scenario we will demonstrate this functionality using [Quarkus](https://www.quarkus.io).

  Context & Dependency Injection (CDI) support allows developers to easily create process and workflow logic, in a standard Java way for building application logic. Developers can focus on developing business logic, rather than having to learn new frameworks and extensions for building process logic. These CDI beans can in their turn be injected with other logic (e.g. Camel for integration, JPA for persistence, SmallRye Reactive Messaging for messaging, etc.).

  ### Other possibilities

  Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- dahmed@redhat.com
private: false
published: true
challenges:
- slug: 01-create-project
  id: 3yc5cf3abhgq
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |
      In this scenario, you will learn how to implement process and workflow logic with CDI beans in [Kogito](https://kogito.kie.org).

      ![Logo](https://katacoda.com/openshift/assets/middleware/middleware-kogito/logo.png)

      ### BPMN2 Service Task and CDI

      The BPMN2 specification defines the _Service Task_, an activity node used to invoke an automated application (or service) to execute a task. In [Kogito](https://kogito.kie.org), a _Service Task_ can be implemented using a CDI bean (Quarkus) or a Spring bean (Spring Boot). In this scenario we will demonstrate this functionality using [Quarkus](https://www.quarkus.io).

      Context & Dependency Injection (CDI) support allows developers to easily create process and workflow logic, in a standard Java way for building application logic. Developers can focus on developing business logic, rather than having to learn new frameworks and extensions for building process logic. These CDI beans can in their turn be injected with other logic (e.g. Camel for integration, JPA for persistence, SmallRye Reactive Messaging for messaging, etc.).

      ### Other possibilities

      Learn more at [kogito.kie.org](https://kogito.kie.org), or just drive on and get hands-on!
  assignment: |
    In this step, you will create the Kogito application skeleton.

    # The Project

    You start with a basic Maven-based Kogito application which has been generated from the Kogito Maven Archetype.

    # The Application You Will Build

    The application is a simple text processor application that will convert the passed text to uppercase.

    You will implement logic that converts the text to uppercase in a CDI bean.

    Let's get started.

    # Create a basic project

    The easiest way to create a new Kogito project is to execute the Maven command below by clicking on it:

    `mvn archetype:generate \
      -DinteractiveMode=false \
      -DarchetypeGroupId=org.kie.kogito \
      -DarchetypeArtifactId=kogito-quarkus-archetype \
      -DarchetypeVersion=0.9.0 \
      -DgroupId=org.acme \
      -DartifactId=service-task-cdi \
      -Dversion=1.0-SNAPSHOT`{{execute}}

    This will use the Kogito Maven Archetype and generate a basic Maven project for you in the `service-task-cdi` subdirectory.

    # BPMN2 Process Definition

    The default Kogito application contains a sample process called `test-process.bpmn2`. We will use this file as the base of our project.

    Click on the following link to open the [Kogito Online Tooling] with our test process: https://kiegroup.github.io/kogito-online/?file=https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/archetypes/kogito-quarkus-archetype/src/main/resources/archetype-resources/src/main/resources/test-process.bpmn2#/editor/bpmn2

    We will use this process definition as the base of our application.

    # Running the Application

    We will now run the Kogito application in development mode. This allows us to keep the application running while implementing our application logic. Kogito and Quarkus will _hot reload_ the application when it is acccessed and changes have been detected.

    ```
    cd /root/projects/kogito/service-task-cdi
    ```

    ```
    mvn clean compile quarkus:dev
    ```

    When the application has started, you can access the [Swagger UI](https://[[CLIENT_SUBDOMAIN]]-8080-[[KATACODA_HOST]].environments.katacoda.com/swagger-ui).

    You should see the following page:

    ![New Kogito Quarkus Web Page](https://katacoda.com/openshift/assets/middleware/middleware-kogito/new-kogito-quarkus-swagger-ui.png)

    It's working!


    # Congratulations!

    You've seen how to create the skeleton of basic Kogito app, and open the base process definition in the [Kogito Online Tooling](https://kiegroup.github.io/kogito-online/#/). Finally, you've started the application in _Quarkus dev-mode_.

    In the next step we'll add a CDI bean that implements our text processing logic.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 200
- slug: 02-implement-cdi-bean
  id: v0gbxqmcsdsa
  type: challenge
  title: Step 2
  assignment: |
    In the previous step you've created a skeleton Kogito application with Quarkus and opened a simple BPMN file with the [Kogito Online Tooling](https://kiegroup.github.io/kogito-online/#/). In this step we'll create the CDI bean that implements the functionality of our BPMN2 _Service Task_.

    ## Create a CDI bean.

    To create a new CDI bean, we simply create a new Java file in our `src/main/java/org/acme` folder.

    Open a new Java file by clicking: `service-task-cdi/src/main/java/org/acme/TextProcessor.java`

    We can now add the class definition to our Java file. Click on the _Copy to Editor_ link to copy the content below to the file you've just created.

    <pre class="file" data-filename="./service-task-cdi/src/main/java/org/acme/TextProcessor.java" data-target="replace">
    package org.acme;

    import javax.enterprise.context.ApplicationScoped;

    /**
     * TextProcessor
     */
    //Add CDI annotation here
    public class TextProcessor {

    //Add toUpper method here

    }
    </pre>


    First, we want to implement our logic. Our process needs to convert all text that is passed to it to uppercase.
    Therefore, we create a method that accepts a `String` as input, and returns the converted `String` as its output.
    We will call the method `toUpper`.

    <pre class="file" data-filename="./service-task/src/main/java/org/acme/TextProcessor.java" data-target="insert" data-marker="//Add toUpper method here">
      public String toUpper(String text) {
        return text.toUpperCase();
      }
    </pre>

    Finally, we need to add the `@ApplicationScoped` CDI annotation to turn our Java bean into a CDI bean.

    <pre class="file" data-filename="./service-task/src/main/java/org/acme/TextProcessor.java" data-target="insert" data-marker="//Add CDI annotation here">
    @ApplicationScoped</pre>

    Since we still have our app running using `mvn quarkus:dev`, when you make these changes and reload the endpoint, Quarkus will notice all of these changes and live-reload them.


    ## Congratulations!

    You've implemented a CDI bean in your Kogito application that can be used as the implementation of a BPMN2 _Service Task_.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 200
- slug: 03-implement-the-process
  id: ezpzug7duuoe
  type: challenge
  title: Step 3
  assignment: |
    In the previous step you added a CDI bean to your Kogito application. Now it's time to implement the process and use this bean from a _Service Task_.

    ## Open the BPMN2 process

    Go back to the Kogito Online editor with the sample process we opened earlier, or re-open it by clicking on the following link: https://kiegroup.github.io/kogito-online/?file=https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/archetypes/kogito-quarkus-archetype/src/main/resources/archetype-resources/src/main/resources/test-process.bpmn2#/editor/bpmn2

    ## Change Process Name.

    We will first change the _name_ and _id_ of the process. This, among other things, controls the name of the RESTful resource (URL) that will be generated for this process by Kogito.

    In the BPMN editor, click on the pencil icon in the upper-right corner to open the properties panel.

    ![BPMN Editor Properties Panel](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-bpmn-editor-open-properties-panel.png)

    Change the _Name_ and _ID_ of the process to `text_processor`.

    ![Process Name](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-process-name.png)

    ## Add Process Variable

    Our application's functionality is to take an input `String` and convert it to uppercase. So, our process definition requires a process variable of type `String` to carry the data through the process.

    Scroll down in the properties panel until you see the section _Process Data_. Expand this section and click on the _+_ sign to add a new process variable. Give the variable the name `mytext` and the type `String`. Leave the _KPI_ checkbox unchecked.

    ![Process Variable](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-process-variable.png)

    ## Create Service Task

    In the diagram, double-click on the `Hello` _Script Task_ to change the name of the node. Change the name to `Process Text`.

    ![Process Text Node](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-process-text-node.png)

    Next, we need to change the node from a _Script Task_ to a _Service Task_. To do this, click on the node, hoover over the gear icon in the lower-left corner of the node, and select _Convert into Service Task_ in the menu.

    ![Convert Into Service Task](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-convert-into-service-task.png)

    ## Configuring the Service Task

    We can now configure the _Service Task_ so that it calls the `toUpper` method of our `TextProcessor` CDI bean, pass the `mytext` process variable to it, and map the result back. To do this, select the `Process Text` _Service Task_, and open the properties panel on the right side of the screen. Expand the _Implementation/Execution_ section. Set the following values:

    * Implementation: `Java`
    * Interface: `org.acme.TextProcessor`
    * Operation: `toUpper`

    ![Service Task Implementation](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-service-task-implementation.png)

    With the implementation configuration set, we can now configure the data _Assignments_. In the properties panel, click on the pencil icon in the _Assignments_ section. In the form that opens, add the following _input_ and _output_ data assignments.

    ![Service Task Data Assignment](https://katacoda.com/openshift/assets/middleware/middleware-kogito/kogito-service-task-cdi-service-task-data-assignment.png)

    Note that the _Name_ of the input assignment is the name of the `toUpper` method argument in our `TextProcessor` CDI bean.

    We have now implemented our process definition. It's time to copy it to our project. Click on the _File Actions_ button in the top-right corner of the BPMN editor. In the drop-down menu, click on _Copy source_. This will copy the source of your BPMN diagram to your clipboard.

    Open the `test-process.bpmn2` file by clicking: `service-task-cdi/src/main/resources/test-process.bpmn2`

    Clear the file's content, and paste the BPMN2 definition that's in your clipboard to the file (right-click and select "Paste", or use Ctrl+V or Command+V, depending on your operating system).

    ## Test the process

    Because we're using the hot-reload functionality of Kogito and Quarkus, we don't need to recompile and restart our application after we've implemented our functionality. We can simply send a new request, and the application will hot/live reload and serve the request. With the following request, we send the text `hello` to our process:

    `curl -X POST "http://localhost:8080/text_processor" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"mytext\": \"hello\"}"`{{execute T2}}

    As we can see from the response, the text is converted to uppercase.

    ## Congratulations!

    In this scenario you've implemented the logic of a BPMN _Service Task_ node using CDI. There is much more to Kogito than CDI and hot-reload, so keep on exploring additional scenarios to learn more, and be sure to visit [kogito.kie.org](https://kogito.kie.org) to learn even more about the architecture and capabilities of this exciting new framework for Cloud Native Business Automation.
  tabs:
  - title: CLI
    type: terminal
    hostname: crc
  - title: Web Console
    type: service
    hostname: crc
    path: /
    port: 30001
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 200
checksum: "8260432864032337322"
